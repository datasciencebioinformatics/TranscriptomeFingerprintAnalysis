#!/usr/bin/env Rscript

############################################################################################################################################

# Rscript that receives the input data file with the reads count, and the data infor, then, 
# normalize the data groupping the samples by groups and diagnosis
# Usage : Rscript --vanilla /data/transimmunom/rnaSeq/scripts/RNASeqNormalization.R database tableReadsCount dataInfo group_phenotype ref_group_phenotype subgroup_phenotype ref_subgroup_phenotype covariate1 covariate2 analysis_level_name outputfolder
#

###########################################################################################################################################

# Load library 
options(java.parameters = "-Xmx16000m")
library("xlsx")
library("DESeq2")
library("pheatmap")
library("cluster")
library("alphahull")
library("org.Hs.eg.db")
library("org.Mm.eg.db")
library("biomaRt")


 
############################################################################################################################################
# First read the arguments
args = commandArgs(trailingOnly=TRUE)

# Read database
database=args[1]

# Read the inputdatafile argument
file_tableReadsCount=args[2]

# Read the inputdatafile2 argument
file_dataInfo=args[3]

# Read the group_phenotype name
group_phenotype=args[4]

# Read the reference for the group_phenotype
ref_group_phenotype=args[5]

# Read the subgroup_phenotype name
subgroup_phenotype=args[6]

# Read the reference for the subgroup_phenotype
ref_subgroup_phenotype=args[7]

# Read the covariate 1
covariate1=args[8]

# Read the covariate 2
covariate2=args[9]

# Read the analysis_level
analysis_level_name=args[10]

# Read the outputfolder argument
outputfolder=args[11]

# Read the outputfolder argument
batch_run=args[12]

############################################################################################################################################

# Setting the analysis_level
if ( analysis_level_name=="transcript") 
{
	# Set the analysis level
	analysis_level="ENSEMBLTRANS"
}else	

{
	# Set the analysis level
	analysis_level="ENSEMBL"
}



############################################################################################################################################

# Initialize mart object
mart = useMart("ensembl")

############################################################################################################################################


# Setting the annotation
# If species is human
if ( database=="human")
{
        # Get the annotation
        anno = org.Hs.eg.db
        mapping = "org.Hs.eg.db"
        dataset="hsapiens_gene_ensembl"
        mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="www.ensembl.org", path="/biomart/martservice" ,dataset=dataset)
}else

{
        # If not, species is equal mouse
        # Get the annotation
        anno = org.Mm.eg.db
        mapping = "org.Mm.eg.db"
        dataset="mmusculus_gene_ensembl"
        mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="www.ensembl.org", dataset=dataset)
}


	############################################################################################################################################
	# Load maxtrix as table
	tableReadsCount_raw<-read.table(file_tableReadsCount,header = TRUE,row.names=1, check.names = FALSE)


	# Sort the columns of the table
	tableReadsCount_raw<-tableReadsCount_raw[ , order(names(tableReadsCount_raw))]


	# Load maxtrix as table
	dataInfo<-data.frame(read.table(file_dataInfo,header = TRUE))

	row.names(dataInfo)<-dataInfo$Sample_Name

	# Sort the rows of the tablek.genes
	dataInfo<-dataInfo[ order(row.names(dataInfo)), ]

	# Transform Run coluln into factor
	dataInfo[,batch_run]<-as.factor(dataInfo[,batch_run])

	# Replace the diagnostis of as.matrix(dataInfo)
	dataInfo<-as.matrix(dataInfo)

	# Replace Behcet-Takayasu-Vascularity-Wegener -> Vascularity
	dataInfo[dataInfo[,subgroup_phenotype]=="Behcet",subgroup_phenotype]<-"Vascularites"
	dataInfo[dataInfo[,subgroup_phenotype]=="takayasu",subgroup_phenotype]<-"Vascularites"
	dataInfo[dataInfo[,subgroup_phenotype]=="Vascularite",subgroup_phenotype]<-"Vascularites"
	dataInfo[dataInfo[,subgroup_phenotype]=="Wegener",subgroup_phenotype]<-"Vascularites"

	# Replace Chron-RCH -> IBD
	dataInfo[dataInfo[,subgroup_phenotype]=="Crohn",subgroup_phenotype]<-"IBD"
	dataInfo[dataInfo[,subgroup_phenotype]=="RCH",subgroup_phenotype]<-"IBD"

	# Replace Chron-RCH -> IBD
	dataInfo[dataInfo[,subgroup_phenotype]=="SpA",subgroup_phenotype]<-"SpA_PR"
	dataInfo[dataInfo[,subgroup_phenotype]=="PR",subgroup_phenotype]<-"SpA_PR"

	# Replace original dataframe
	dataInfo<-data.frame(dataInfo)
	

	
	print(dataInfo)

	# Read cytokine list
	cytokines<-read.csv("/data/RawData/database/Homo_sapiens/Ensembl/GRCh37/Annotation/Cytokines/Cytokines.ensembl.txt", header = FALSE, sep = ",", quote = "\"",   dec = ".", fill = TRUE, comment.char = "")
	transimunnom<-read.table("/data/RawData/database/Homo_sapiens/Ensembl/GRCh37/Annotation/Cytokines/Cytokines.transimmunom.txt",header = TRUE,row.names=1, check.names = FALSE)
	XYChromosome<-read.table("/data/RawData/database/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/XYChromosome.genes.list",header = FALSE,row.names=1, check.names = FALSE)
	


	# Exclude Arthrose
	dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="Arthrose",]

	# Exclude FMF
	#dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="FMF",]

	# Exclude Lupus
	#dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="Lupus",]


	# Exclude Lupus
	#dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="MAI",]

	# Exclude Lupus
	#dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="Myosite",]

	# Exclude Lupus
	dataInfo<-dataInfo[dataInfo[,subgroup_phenotype]!="SAPL",]

	# Remove samples from reads table
	tableReadsCount_raw<-tableReadsCount_raw[,rownames(dataInfo)]

	# Remove all XY genes
	tableReadsCount_raw<-tableReadsCount_raw[-which(rownames(tableReadsCount_raw) %in% rownames(XYChromosome)),rownames(dataInfo) ]

	############################################################################################################################################

	library(Seurat)
	library(dplyr)
	library(Matrix)
	library(cowplot)
	library(ClusterR)

	ycutoff=2
	perplexity=20
	kgenes=0.4
	pvalue=0.0001

	############################################################################################################################################
	dir.create(outputfolder)
	############################################################################################################################################


	# Create NBT object
	pbmc_subgroup_phenotype=CreateSeuratObject(tableReadsCount_raw, project = "transimmunom",display.progress = TRUE)

	# Set identity
	pbmc_subgroup_phenotype<-SetIdent(pbmc_subgroup_phenotype, ident.use =dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype])

	# The number of genes and UMIs (nGene and nUMI) are automatically calculated
	# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
	# the non-normalized values within a cell We calculate the percentage of
	# mitochondrial genes here and store it in percent.mito using AddMetaData.
	# We use object@raw.data since this represents non-transformed and
	# non-log-normalized counts The % of UMI mapping to MT-genes is a common
	# scRNA-seq QC metric.  NOTE:	# Read cytokine list
	
	# calculate the percent.mito values.
	# Normalizing the data
	png(paste(outputfolder,paste("GenePlot_raw.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		GenePlot(pbmc_subgroup_phenotype, "nUMI","nGene", col.use="black")
	dev.off()

	# Filter out
	pbmc_subgroup_phenotype <- FilterCells(object = pbmc_subgroup_phenotype, subset.names = c("nUMI","nGene"),low.thresholds = c(0,17000), high.thresholds = c(100000000,30000))

	# calculate the percent.mito values.
	# Normalizing the data
	png(paste(outputfolder,paste("GenePlot_filtered.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		GenePlot(pbmc_subgroup_phenotype, "nUMI","nGene", col.use="black")
	dev.off()

	# Filter out data info
	dataInfo<-dataInfo[names(pbmc_subgroup_phenotype@ident),]

	# Set identity
	pbmc_subgroup_phenotype<-SetIdent(pbmc_subgroup_phenotype, ident.use =dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype])

	# Normalize data
	pbmc_subgroup_phenotype <- NormalizeData(object = pbmc_subgroup_phenotype)

	# Scale data
	# Save plot
	pbmc_subgroup_phenotype <- ScaleData(object = pbmc_subgroup_phenotype, vars.to.regress=c("nUMI"))

	# Set var.genes
	pbmc_subgroup_phenotype@var.genes<-rownames(pbmc_subgroup_phenotype@raw.data)

	# Perform linear dimensional reductionPCA with all genes
	pbmc_subgroup_phenotype <- RunPCA(object = pbmc_subgroup_phenotype, pc.genes = pbmc_subgroup_phenotype@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)

	# PCA with all genes
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_all_genes.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5 ,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	

	# Save plot
	png(paste(outputfolder,paste("VlnPlot_subgroup_phenotype.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# Second heatmap - group_phenotype- assay(rld)
		VlnPlot(object = pbmc_subgroup_phenotype, features.plot = c("nUMI","nGene"), nCol = 2)
	dev.off()
	

	# Find variable genes
	png(paste(outputfolder,paste("FindVariableGenes_subgroup_phenotype.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# Find variable genes
		pbmc_subgroup_phenotype <- FindVariableGenes(object=pbmc_subgroup_phenotype, y.cutoff = ycutoff)
	dev.off()

	# Take averaged expressio n	
	averaged_exression<-AverageExpression(pbmc_subgroup_phenotype, genes.use = rownames(pbmc_subgroup_phenotype@raw.data))

	# Find markers for cluster
	allMarkers_subgroup_phenotype_TOP2000<-data.frame(gene=c(),exp=c(),d=c())


	# For each cluster	
	for (d in levels(pbmc_subgroup_phenotype@ident))
	{
		# Diseases
		print (d)		
		d_exp<-data.frame(averaged_exression[,d])
		genes<-rownames(averaged_exression)		
		
		# Bind gene names with expression
		d_exp<-cbind(genes,d_exp)

		# Set col names
		colnames(d_exp)<-c("gene","exp")

		# Set row names
		rownames(d_exp)<-rownames(averaged_exression)

		if(dim(allMarkers_subgroup_phenotype_TOP2000)[1]==0)
		{
			allMarkers_subgroup_phenotype_TOP2000<-as.matrix(cbind(d_exp[with(d_exp, order(-exp)), ][1:2000,1:2],d))
			
		}else
		{
			df1<-as.matrix(allMarkers_subgroup_phenotype_TOP2000)
			df2<-as.matrix(cbind(d_exp[with(d_exp, order(-exp)), ][1:2000,1:2],d))
			rownames(df1)<-NULL
			rownames(df2)<-NULL
			
			# Save all markers in one single take
			allMarkers_subgroup_phenotype_TOP2000<-as.matrix(rbind(df1,df2))
		}
	
	}
	# Return data.frame
	allMarkers_subgroup_phenotype_TOP2000<-data.frame(allMarkers_subgroup_phenotype_TOP2000)


	# Find markers for cluster
	allMarkers_subgroup_phenotype_DESEQ2<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = log(2), test.use = "DESeq2", min.pct = 0.1, min.diff.pct = -Inf, print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 1, pseudocount.use = 1, assay.type = "RNA", return.thresh = pvalue,design = as.formula(paste("~",batch_run,"+",covariate1,"+",subgroup_phenotype)))  

	# Find markers for cluster
	allMarkers_subgroup_phenotype_ROC<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = log(1), test.use = "roc", min.pct = 0.1, min.diff.pct = -Inf, print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 1, pseudocount.use = 1, assay.type = "RNA") 


	# Find markers for cluster
	allMarkers_subgroup_phenotype_WILCOX<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = log(1), test.use = "wilcox", print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 1, pseudocount.use = 1, assay.type = "RNA") # , return.thresh = 0.01

	# Find markers for cluster
	allMarkers_subgroup_phenotype_MAST<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = log(1), test.use = "MAST", assay.type = "RNA") # , return.thresh = 0.001

	# Find markers for cluster 
	allMarkers_subgroup_phenotype_BIMOD<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = log(1), test.use = "bimod", min.pct = 0.1, min.diff.pct = -Inf, print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 1, pseudocount.use = 1, assay.type = "RNA") #, return.thresh = 0.001


	# Filter by pvalue
	# ROC take only predictive power greater than 0.5
	allMarkers_subgroup_phenotype_ROC<-allMarkers_subgroup_phenotype_ROC[which(allMarkers_subgroup_phenotype_ROC$power>0.5),]

	# WILCOX p_val<0.001
	allMarkers_subgroup_phenotype_WILCOX<-allMarkers_subgroup_phenotype_WILCOX[allMarkers_subgroup_phenotype_WILCOX$p_val<0.001,]

	# WILCOX p_val<0.001
	allMarkers_subgroup_phenotype_BIMOD<-allMarkers_subgroup_phenotype_BIMOD[allMarkers_subgroup_phenotype_BIMOD$p_val<0.0001,]

	# Filter out IBD
	#allMarkers_subgroup_phenotype_ROC<-allMarkers_subgroup_phenotype_ROC[which(allMarkers_subgroup_phenotype_ROC$cluster!="IBD"),]
	#allMarkers_subgroup_phenotype_DESEQ2<-allMarkers_subgroup_phenotype_DESEQ2[which(allMarkers_subgroup_phenotype_DESEQ2$cluster!="IBD"),]
	#allMarkers_subgroup_phenotype_WILCOX<-allMarkers_subgroup_phenotype_WILCOX[which(allMarkers_subgroup_phenotype_WILCOX$cluster!="IBD"),]
	#allMarkers_subgroup_phenotype_MAST<-allMarkers_subgroup_phenotype_MAST[which(allMarkers_subgroup_phenotype_MAST$cluster!="IBD"),]
	#allMarkers_subgroup_phenotype_BIMOD<-allMarkers_subgroup_phenotype_BIMOD[which(allMarkers_subgroup_phenotype_BIMOD$cluster!="IBD"),]


	############################################################################################################################################
	# Create DESeq object from data, grouped by Diagnostic
	DESeqData_subgroup_phenotype <- DESeqDataSetFromMatrix(countData =  pbmc_subgroup_phenotype@raw.data[,names(pbmc_subgroup_phenotype@ident)],colData = data.frame(as.matrix(dataInfo[names(pbmc_subgroup_phenotype@ident),])), design = as.formula(paste("~",batch_run,"+",covariate1,"+",subgroup_phenotype)))

	# Comparison will be the last level of this variable over the first level - Sample_subgroup
	DESeqData_subgroup_phenotype <- DESeq(DESeqData_subgroup_phenotype)

	# Take the normalized values for selected genes from group_phenotypevsd
	vst_assay<- varianceStabilizingTransformation(DESeqData_subgroup_phenotype, blind=FALSE)

	# Take the normalized values for selected genes from group_phenotypevsd
	vst<- assay(normTransform(DESeqData_subgroup_phenotype) )[rownames(pbmc_subgroup_phenotype@raw.data),names(pbmc_subgroup_phenotype@ident)]

	# Replace data
	pbmc_subgroup_phenotype@scale.data<-vst

	# Replace data
	pbmc_subgroup_phenotype@data<-vst
	############################################################################################################################################
	


	# Plot also only the diseases with signficant number of samples (the same used for the markers selection) - TODO
	# Save the "Markers" for each diagnostic - TODO
	write.xlsx(allMarkers_subgroup_phenotype_DESEQ2, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="DESEQ2", append=TRUE)
	write.xlsx(allMarkers_subgroup_phenotype_ROC, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="ROC", append=TRUE)
	write.xlsx(allMarkers_subgroup_phenotype_WILCOX, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="WILCOX", append=TRUE)
	write.xlsx(allMarkers_subgroup_phenotype_MAST, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="MAST", append=TRUE)
	write.xlsx(allMarkers_subgroup_phenotype_BIMOD, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="BIMOD", append=TRUE)
	write.xlsx(allMarkers_subgroup_phenotype_TOP2000, file=paste(outputfolder,"/Markers.xlsx",sep="/"), sheetName="TOP2000", append=TRUE)


	# Copy for each method
	pbmc_subgroup_phenotype_DESEQ2<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_ROC<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_WILCOX<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_MAST<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_BIMOD<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_UNION<-pbmc_subgroup_phenotype
	pbmc_subgroup_phenotype_TOP2000<-pbmc_subgroup_phenotype

	# Set var.genes for each method
	pbmc_subgroup_phenotype_DESEQ2@var.genes<-allMarkers_subgroup_phenotype_DESEQ2$gene
	pbmc_subgroup_phenotype_ROC@var.genes<-allMarkers_subgroup_phenotype_ROC$gene
	pbmc_subgroup_phenotype_WILCOX@var.genes<-allMarkers_subgroup_phenotype_WILCOX$gene
	pbmc_subgroup_phenotype_MAST@var.genes<-allMarkers_subgroup_phenotype_MAST$gene
	pbmc_subgroup_phenotype_BIMOD@var.genes<-allMarkers_subgroup_phenotype_BIMOD$gene
	pbmc_subgroup_phenotype_UNION@var.genes<-unique(c(allMarkers_subgroup_phenotype_DESEQ2$gene,allMarkers_subgroup_phenotype_ROC$gene,allMarkers_subgroup_phenotype_WILCOX$gene,allMarkers_subgroup_phenotype_MAST$gene,allMarkers_subgroup_phenotype_BIMOD$gene))
	pbmc_subgroup_phenotype_TOP2000@var.genes<-unique(as.vector(allMarkers_subgroup_phenotype_TOP2000$gene))



	# Perform linear dimensional reduction for each method
	pbmc_subgroup_phenotype_DESEQ2 <- RunPCA(object = pbmc_subgroup_phenotype_DESEQ2, pc.genes = pbmc_subgroup_phenotype_DESEQ2@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_ROC <- RunPCA(object = pbmc_subgroup_phenotype_ROC, pc.genes = pbmc_subgroup_phenotype_ROC@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_WILCOX <- RunPCA(object = pbmc_subgroup_phenotype_WILCOX, pc.genes = pbmc_subgroup_phenotype_WILCOX@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_MAST <- RunPCA(object = pbmc_subgroup_phenotype_MAST, pc.genes = pbmc_subgroup_phenotype_MAST@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_BIMOD <- RunPCA(object = pbmc_subgroup_phenotype_BIMOD, pc.genes = pbmc_subgroup_phenotype_BIMOD@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_UNION <- RunPCA(object = pbmc_subgroup_phenotype_UNION, pc.genes = pbmc_subgroup_phenotype_UNION@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)
	pbmc_subgroup_phenotype_TOP2000 <- RunPCA(object = pbmc_subgroup_phenotype_TOP2000, pc.genes = pbmc_subgroup_phenotype_TOP2000@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5, pcs.compute = 10)



	# Plot PCA for each method
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_DESEQ2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_DESEQ2, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_ROC.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_ROC, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_WILCOX.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_WILCOX, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_MAST.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_MAST, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_BIMOD.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_BIMOD, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_UNION.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_UNION, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("PCAPlot_subgroup_phenotype_TOP2000.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# PCAPlot
		PCAPlot(object = pbmc_subgroup_phenotype_TOP2000, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()


	# Run Non-linear dimensional reduction (tSNE)
	pbmc_subgroup_phenotype_DESEQ2 <- RunTSNE(object = pbmc_subgroup_phenotype_DESEQ2, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_DESEQ2@var.genes )		
	pbmc_subgroup_phenotype_ROC <- RunTSNE(object = pbmc_subgroup_phenotype_ROC, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_ROC@var.genes )
	pbmc_subgroup_phenotype_WILCOX <- RunTSNE(object = pbmc_subgroup_phenotype_WILCOX, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_WILCOX@var.genes )				
	pbmc_subgroup_phenotype_MAST <- RunTSNE(object = pbmc_subgroup_phenotype_MAST, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_MAST@var.genes )					
	pbmc_subgroup_phenotype_BIMOD <- RunTSNE(object = pbmc_subgroup_phenotype_BIMOD, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_BIMOD@var.genes )				
	pbmc_subgroup_phenotype_UNION <- RunTSNE(object = pbmc_subgroup_phenotype_UNION, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_UNION@var.genes )				
	pbmc_subgroup_phenotype_TOP2000 <- RunTSNE(object = pbmc_subgroup_phenotype_TOP2000, dims.use = 1:10, do.fast = TRUE, perplexity=perplexity, genes.use = pbmc_subgroup_phenotype_TOP2000@var.genes )				

	# Plot PCA for each method
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_DESEQ2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_DESEQ2, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_ROC.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_ROC, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_WILCOX.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_WILCOX, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_MAST.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_MAST, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_BIMOD.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_BIMOD, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_UNION.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_UNION, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_TOP2000.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_TOP2000, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()


	# Set identity
	pbmc_subgroup_phenotype_DESEQ2<-SetIdent(pbmc_subgroup_phenotype_DESEQ2, ident.use =dataInfo[names(pbmc_subgroup_phenotype_DESEQ2@ident),covariate1])
	pbmc_subgroup_phenotype_ROC<-SetIdent(pbmc_subgroup_phenotype_ROC, ident.use =dataInfo[names(pbmc_subgroup_phenotype_ROC@ident),covariate1])
	pbmc_subgroup_phenotype_WILCOX<-SetIdent(pbmc_subgroup_phenotype_WILCOX, ident.use =dataInfo[names(pbmc_subgroup_phenotype_WILCOX@ident),covariate1])
	pbmc_subgroup_phenotype_MAST<-SetIdent(pbmc_subgroup_phenotype_MAST, ident.use =dataInfo[names(pbmc_subgroup_phenotype_MAST@ident),covariate1])
	pbmc_subgroup_phenotype_BIMOD<-SetIdent(pbmc_subgroup_phenotype_BIMOD, ident.use =dataInfo[names(pbmc_subgroup_phenotype_BIMOD@ident),covariate1])
	pbmc_subgroup_phenotype_UNION<-SetIdent(pbmc_subgroup_phenotype_UNION, ident.use =dataInfo[names(pbmc_subgroup_phenotype_UNION@ident),covariate1])
	pbmc_subgroup_phenotype_TOP2000<-SetIdent(pbmc_subgroup_phenotype_TOP2000, ident.use =dataInfo[names(pbmc_subgroup_phenotype_TOP2000@ident),covariate1])


	# Plot PCA for each method
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_DESEQ2_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_DESEQ2, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_ROC_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_ROC, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_WILCOX_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_WILCOX, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_MAST_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_MAST, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_BIMOD_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_BIMOD, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_UNION_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_UNION, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()

	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_TOP2000_covariate1.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_TOP2000, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()


	# Set identity
	pbmc_subgroup_phenotype_DESEQ2<-SetIdent(pbmc_subgroup_phenotype_DESEQ2, ident.use =dataInfo[names(pbmc_subgroup_phenotype_DESEQ2@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_ROC<-SetIdent(pbmc_subgroup_phenotype_ROC, ident.use =dataInfo[names(pbmc_subgroup_phenotype_ROC@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_WILCOX<-SetIdent(pbmc_subgroup_phenotype_WILCOX, ident.use =dataInfo[names(pbmc_subgroup_phenotype_WILCOX@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_MAST<-SetIdent(pbmc_subgroup_phenotype_MAST, ident.use =dataInfo[names(pbmc_subgroup_phenotype_MAST@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_BIMOD<-SetIdent(pbmc_subgroup_phenotype_BIMOD, ident.use =dataInfo[names(pbmc_subgroup_phenotype_BIMOD@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_UNION<-SetIdent(pbmc_subgroup_phenotype_UNION, ident.use =dataInfo[names(pbmc_subgroup_phenotype_UNION@ident),subgroup_phenotype])
	pbmc_subgroup_phenotype_TOP2000<-SetIdent(pbmc_subgroup_phenotype_TOP2000, ident.use =dataInfo[names(pbmc_subgroup_phenotype_TOP2000@ident),subgroup_phenotype])

	


	# save.SNN = T saves the SNN so that the clustering algorithm can be rerun
	# using the same graph but with a different resolution value (see docs for
	# full details)
	k.param= 12
	k.scale = 5
	algorithm = 2
	resolution = 1

	# Plot Cluster for each method
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_DESEQ2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_DESEQ2<-FindClusters(pbmc_subgroup_phenotype_DESEQ2, genes.use =   pbmc_subgroup_phenotype_DESEQ2@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_ROC.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_ROC<-FindClusters(pbmc_subgroup_phenotype_ROC, genes.use =   pbmc_subgroup_phenotype_ROC@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_WILCOX.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_WILCOX<-FindClusters(pbmc_subgroup_phenotype_WILCOX, genes.use =   pbmc_subgroup_phenotype_WILCOX@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_MAST.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_MAST<-FindClusters(pbmc_subgroup_phenotype_MAST, genes.use =   pbmc_subgroup_phenotype_MAST@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_BIMOD.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_BIMOD<-FindClusters(pbmc_subgroup_phenotype_BIMOD, genes.use =   pbmc_subgroup_phenotype_BIMOD@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()
	png(paste(outputfolder,paste("SNN_subgroup_phenotype_UNION.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_UNION<-FindClusters(pbmc_subgroup_phenotype_UNION, genes.use =   pbmc_subgroup_phenotype_UNION@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()

	png(paste(outputfolder,paste("SNN_subgroup_phenotype_TOP2000.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		pbmc_subgroup_phenotype_TOP2000<-FindClusters(pbmc_subgroup_phenotype_TOP2000, genes.use =   pbmc_subgroup_phenotype_TOP2000@var.genes, reduction.type = "tsne",  dims.use = 1:2, plot.SNN = TRUE,save.SNN = TRUE,resolution = resolution,k.param = k.param, force.recalc = TRUE,n.start = 50000, n.iter = 10000, k.scale = k.scale, algorithm = algorithm)
	dev.off()

	# Save cluster results for each method
	SNN_clustrers_subgroup_phenotype_DESEQ2<-pbmc_subgroup_phenotype_DESEQ2@ident
	SNN_clustrers_subgroup_phenotype_ROC<-pbmc_subgroup_phenotype_ROC@ident
	SNN_clustrers_subgroup_phenotype_WILCOX<-pbmc_subgroup_phenotype_WILCOX@ident
	SNN_clustrers_subgroup_phenotype_MAST<-pbmc_subgroup_phenotype_MAST@ident
	SNN_clustrers_subgroup_phenotype_BIMOD<-pbmc_subgroup_phenotype_BIMOD@ident
	SNN_clustrers_subgroup_phenotype_UNION<-pbmc_subgroup_phenotype_UNION@ident
	SNN_clustrers_subgroup_phenotype_TOP2000<-pbmc_subgroup_phenotype_TOP2000@ident


	# Plot PCA for each method
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_DESEQ2_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_DESEQ2, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_ROC_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_ROC, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_WILCOX_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_WILCOX, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_MAST_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_MAST, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_BIMOD_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_BIMOD, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_UNION_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_UNION, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()

	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_TOP2000_SNN.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_TOP2000, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))
	dev.off()



	# Plot PCA for each method
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_DESEQ2_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_DESEQ2, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_ROC_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_ROC, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_WILCOX_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_WILCOX, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_MAST_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_MAST, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_BIMOD_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_BIMOD, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()
	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_UNION_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_UNION, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()

	png(paste(outputfolder,paste("TSNEPlot_subgroup_phenotype_TOP2000_SNN_V2.png",sep="_"),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# TSNEPlot
		TSNEPlot(object = pbmc_subgroup_phenotype_TOP2000, dim.1 = 1, dim.2 = 2, do.label=T, pt.size=5,do.return=TRUE)+ theme(legend.text=element_text(size=16))+ geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))
	dev.off()



	# Save data optimal clustering solution
	x_subgroup_phenotype <- as.factor(as.vector(dataInfo[,subgroup_phenotype]))
	levels(x_subgroup_phenotype) <- 1:length(levels(x_subgroup_phenotype))
	x_subgroup_phenotype <- as.numeric(x_subgroup_phenotype)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_DESEQ2 = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_DESEQ2)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_DESEQ2 = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_DESEQ2)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_DESEQ2 = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_DESEQ2)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_ROC = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_ROC)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_ROC = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_ROC)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_ROC = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_ROC)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_WILCOX = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_WILCOX)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_WILCOX = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_WILCOX)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_WILCOX = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_WILCOX)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_MAST = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_MAST)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_MAST = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_MAST)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_MAST = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_MAST)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_BIMOD = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_BIMOD)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_BIMOD = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_BIMOD)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_BIMOD = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_BIMOD)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_UNION = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_UNION)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_UNION= external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_UNION)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_UNION = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_UNION)), method = "nmi", summary_stats = T)

	# Save cluster results for each method
	putiry_pbmc_subgroup_phenotype_SNN_TOP2000 = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_TOP2000)), method = "purity", summary_stats = T)
	entropy_pbmc_subgroup_phenotype_SNN_TOP2000= external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_TOP2000)), method = "entropy", summary_stats = T)
	nmi_pbmc_subgroup_phenotype_SNN_TOP2000 = external_validation(x_subgroup_phenotype,as.numeric(as.vector(SNN_clustrers_subgroup_phenotype_TOP2000)), method = "nmi", summary_stats = T)
	###################################################################################################################################




	# Run also 1000 randomly generated clusters and compare the clustering assessment values
	# Set the number of random iterations
	RN<-1000

	# Set the result table
	df_radom_results_gp<- data.frame(index=c(1:RN),purity=c(1:RN),entropy=c(1:RN),nmi=c(1:RN))


	# Set random seed
	set.seed(1234)
	# Start Icrement
	IT=1
	# Repeat 1000 times
	for (i in c(1:RN))
	{
		# Get random genes
		random_labels<-sample(x_subgroup_phenotype)


		print(i)

		# Matrix results c(index,RandomOOB,randomLength)
		df_radom_results_gp$index[IT]<-i
	
		# Matrix results c(index,purity,specificity,sensitivity,precision)
		df_radom_results_gp$purity[IT]<-external_validation(x_subgroup_phenotype, random_labels, method = "purity", summary_stats = FALSE)

		# Matrix results c(index,purity,specificity,sensitivity,precision)
		df_radom_results_gp$entropy[IT]<-external_validation(x_subgroup_phenotype, random_labels, method = "entropy", summary_stats = FALSE)

		# Matrix results c(index,purity,specificity,sensitivity,precision)
		df_radom_results_gp$nmi[IT]<-external_validation(x_subgroup_phenotype, random_labels, method = "nmi", summary_stats = FALSE)

		IT=IT+1

	}



	# Take the minimum and maximum of histogram
	min<-min(c(df_radom_results_gp$entropy,entropy_pbmc_subgroup_phenotype_SNN_DESEQ2,entropy_pbmc_subgroup_phenotype_SNN_ROC,entropy_pbmc_subgroup_phenotype_SNN_WILCOX,entropy_pbmc_subgroup_phenotype_SNN_MAST,entropy_pbmc_subgroup_phenotype_SNN_BIMOD,entropy_pbmc_subgroup_phenotype_SNN_UNION))
	max<-max(c(df_radom_results_gp$entropy,entropy_pbmc_subgroup_phenotype_SNN_DESEQ2,entropy_pbmc_subgroup_phenotype_SNN_ROC,entropy_pbmc_subgroup_phenotype_SNN_WILCOX,entropy_pbmc_subgroup_phenotype_SNN_MAST,entropy_pbmc_subgroup_phenotype_SNN_BIMOD,entropy_pbmc_subgroup_phenotype_SNN_UNION))


	# Plot histogram Random values
	png(paste(outputfolder,"HistogramRandomValuesentropysubgroup_phenotype.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)
		# Plot histogram
		hist(df_radom_results_gp$entropy,     main="ClusterR stat",      border="blue",      col="green",      xlim=c(min,max), xlab="entropy",   las=0.001,      prob = TRUE, nclass=10)	

		# Add arrow for top genes
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_DESEQ2, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_DESEQ2, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_ROC, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_ROC, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_WILCOX, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_WILCOX, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_MAST, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_MAST, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_BIMOD, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_BIMOD, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_UNION, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_UNION, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = entropy_pbmc_subgroup_phenotype_SNN_TOP2000, 0, x1 = entropy_pbmc_subgroup_phenotype_SNN_TOP2000, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))


		# Add text for top genes
		text(entropy_pbmc_subgroup_phenotype_SNN_DESEQ2, 8, "DESEQ2", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_ROC, 8, "ROC", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_WILCOX, 8, "WILCOX", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_MAST, 8, "MAST", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_BIMOD, 8, "BIMOD", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_UNION, 8, "UNION", cex = 1.5, srt=90)
		text(entropy_pbmc_subgroup_phenotype_SNN_TOP2000, 8, "TOP2000", cex = 1.5, srt=90)

	dev.off()


	# Take the minimum and maximum of histogram
	min<-min(c(df_radom_results_gp$nmi,nmi_pbmc_subgroup_phenotype_SNN_DESEQ2,nmi_pbmc_subgroup_phenotype_SNN_ROC,nmi_pbmc_subgroup_phenotype_SNN_WILCOX,nmi_pbmc_subgroup_phenotype_SNN_MAST,nmi_pbmc_subgroup_phenotype_SNN_BIMOD,nmi_pbmc_subgroup_phenotype_SNN_UNION))
	max<-max(c(df_radom_results_gp$nmi,nmi_pbmc_subgroup_phenotype_SNN_DESEQ2,nmi_pbmc_subgroup_phenotype_SNN_ROC,nmi_pbmc_subgroup_phenotype_SNN_WILCOX,nmi_pbmc_subgroup_phenotype_SNN_MAST,nmi_pbmc_subgroup_phenotype_SNN_BIMOD,nmi_pbmc_subgroup_phenotype_SNN_UNION))


	# Plot histogram Random values
	png(paste(outputfolder,"HistogramRandomValuesnmisubgroup_phenotype.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)
		# Plot histogram
		hist(df_radom_results_gp$nmi,     main="ClusterR stat",      border="blue",      col="green",      xlim=c(min,max), xlab="nmi",   las=0.001,      prob = TRUE, nclass=10)	

		# Add arrow for top genes
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_DESEQ2, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_DESEQ2, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_ROC, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_ROC, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_WILCOX, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_WILCOX, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_MAST, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_MAST, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_BIMOD, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_BIMOD, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_UNION, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_UNION, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = nmi_pbmc_subgroup_phenotype_SNN_TOP2000, 0, x1 = nmi_pbmc_subgroup_phenotype_SNN_TOP2000, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))


		# Add text for top genes
		text(nmi_pbmc_subgroup_phenotype_SNN_DESEQ2, 8, "DESEQ2", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_ROC, 8, "ROC", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_WILCOX, 8, "WILCOX", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_MAST, 8, "MAST", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_BIMOD, 8, "BIMOD", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_UNION, 8, "UNION", cex = 1.5, srt=90)
		text(nmi_pbmc_subgroup_phenotype_SNN_TOP2000, 8, "TOP2000", cex = 1.5, srt=90)

	dev.off()



	# Take the minimum and maximum of histogram
	min<-min(c(df_radom_results_gp$purity,putiry_pbmc_subgroup_phenotype_SNN_DESEQ2,putiry_pbmc_subgroup_phenotype_SNN_ROC,putiry_pbmc_subgroup_phenotype_SNN_WILCOX,putiry_pbmc_subgroup_phenotype_SNN_MAST,putiry_pbmc_subgroup_phenotype_SNN_BIMOD,putiry_pbmc_subgroup_phenotype_SNN_UNION))
	max<-max(c(df_radom_results_gp$purity,putiry_pbmc_subgroup_phenotype_SNN_DESEQ2,putiry_pbmc_subgroup_phenotype_SNN_ROC,putiry_pbmc_subgroup_phenotype_SNN_WILCOX,putiry_pbmc_subgroup_phenotype_SNN_MAST,putiry_pbmc_subgroup_phenotype_SNN_BIMOD,putiry_pbmc_subgroup_phenotype_SNN_UNION))


	# Plot histogram Random values
	png(paste(outputfolder,"HistogramRandomValuesputirysubgroup_phenotype.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)
		# Plot histogram
		hist(df_radom_results_gp$purity,     main="ClusterR stat",      border="blue",      col="green",      xlim=c(min,max), xlab="putiry",   las=0.001,      prob = TRUE, nclass=10)	

		# Add arrow for top genes
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_DESEQ2, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_DESEQ2, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_ROC, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_ROC, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_WILCOX, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_WILCOX, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_MAST, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_MAST, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_BIMOD, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_BIMOD, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_UNION, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_UNION, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))
		arrows(x0 = putiry_pbmc_subgroup_phenotype_SNN_TOP2000, 0, x1 = putiry_pbmc_subgroup_phenotype_SNN_TOP2000, y0 = 7, y1=0, length = 0.5, angle = 20, code = 2, col = par("fg"), lty = par("lty"), lwd = par("lwd"))


		# Add text for top genes
		text(putiry_pbmc_subgroup_phenotype_SNN_DESEQ2, 8, "DESEQ2", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_ROC, 8, "ROC", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_WILCOX, 8, "WILCOX", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_MAST, 8, "MAST", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_BIMOD, 8, "BIMOD", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_UNION, 8, "UNION", cex = 1.5, srt=90)
		text(putiry_pbmc_subgroup_phenotype_SNN_TOP2000, 8, "TOP2000", cex = 1.5, srt=90)

	dev.off()



# Take all symbols <- 
symbol_norm<-AnnotationDbi::select(anno, keys=rownames(pbmc_subgroup_phenotype@scale.data), columns=c("SYMBOL"), keytype=analysis_level, multiVals=first)

# Replace NA by ID
symbol_norm[which(is.na(symbol_norm$SYMBOL)),]$SYMBOL<-symbol_norm[which(is.na(symbol_norm$SYMBOL)),]$ENSEMBL

# Replace cytokine table
cytokines<-data.frame(V1=symbol_norm$ENSEMBL,V2=symbol_norm$SYMBOL,V3="Human",V4="Gene",V5="text")


# Set lists with the objects and the names of the methods
list_methods<-list(pbmc_subgroup_phenotype_DESEQ2,pbmc_subgroup_phenotype_BIMOD,pbmc_subgroup_phenotype_MAST,pbmc_subgroup_phenotype_ROC,pbmc_subgroup_phenotype_UNION,pbmc_subgroup_phenotype_WILCOX,pbmc_subgroup_phenotype_TOP2000)
list_NAMES<-list("DESEQ2","BIMOD","MAST","ROC","UNION","WILCOX","TOP2000")

IT=1
for (I in 1:length(list_NAMES) )
{

	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)

	# Set the objetc with the method to be analyzed
	pbmc_subgroup_phenotype<-list_methods[[I]]

	# Method name
	method_name=list_NAMES[[I]]

	# Save the clustering og the objetc
	SNN_clustrers_subgroup_phenotype<-pbmc_subgroup_phenotype@ident

	# Transform cytokines table into transimunnom table
	df_transimmunom<-data.frame(V1=as.vector(symbol_norm$ENSEMBL),V2=as.vector(symbol_norm$SYMBOL))

	# Keep only non-duplicatas
	df_transimmunom<-df_transimmunom[!duplicated(df_transimmunom$V1), ]

	# Transform cytokines table into transimunnom table
	rownames(df_transimmunom)<-as.vector(df_transimmunom$V1)


	# Results clustering FindMarkers
	FindMarkers_pbmc_subgroup_phenotype<-list()
	signMarkers_pbmc_subgroup_phenotype<-list()
	idMarkers_pbmc_subgroup_phenotype<-list()

	# For each cluster	
	for (c in as.numeric(levels(pbmc_subgroup_phenotype@ident)))
	{
		# Threshold
		threshold<-0.001

		# Calculate markers

		t<-FindMarkers(pbmc_subgroup_phenotype, ident.1 = c, ident.2 = NULL, genes.use = rownames(df_transimmunom), logfc.threshold = 0.25, test.use = "roc", min.pct = 0.1, min.diff.pct = -Inf, print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 1, pseudocount.use = 1, assay.type = "RNA")
		t<-t[1:2,]

			
		# Take only significant markers
		FindMarkers_pbmc_subgroup_phenotype[c+1]<-list(paste0(df_transimmunom[rownames(t),2],colapse=""))

		# Take the sign of the marker
		signMarkers_pbmc_subgroup_phenotype[c+1]<-list(paste0(gsub("1", "",gsub("-1", "-", sign(t$avg_logFC))),colapse=""))

		# Take the ID of the marker the 
		idMarkers_pbmc_subgroup_phenotype[c+1]<-list(paste0(df_transimmunom[rownames(t),1],colapse=""))


	}
	# Replace names
	names(FindMarkers_pbmc_subgroup_phenotype)<-levels(pbmc_subgroup_phenotype@ident)
	names(signMarkers_pbmc_subgroup_phenotype)<-levels(pbmc_subgroup_phenotype@ident)
	names(idMarkers_pbmc_subgroup_phenotype)<-levels(pbmc_subgroup_phenotype@ident)

	# Get data for the group
	data<-cbind(t(pbmc_subgroup_phenotype@scale.data[as.vector(allMarkers_subgroup_phenotype_TOP2000[1:2,]$gene),]),as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),c(subgroup_phenotype,group_phenotype,covariate1,covariate2)]))

	# Set col names
	colnames(data)[1:2]<-c("Marker1","Marker2")

	# Add cluster information
	data<-cbind(data,cluster=as.vector(pbmc_subgroup_phenotype@ident))

	# Add cluster information
	print(paste(outputfolder,paste("ggplot_clusters_composition_sex",method_name,".png",sep=""),sep="/"))
	png(paste(outputfolder,paste("ggplot_clusters_composition_sex",method_name,".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		ggplot(data) +
		  geom_jitter(aes(factor(cluster), Sex, colour = Diagnostic), width = 0.2, size = 6) +
		  theme_classic() +
		  xlab("clusters") +
		  ylab("Sex") +
		  theme(
		    axis.text.y = element_text(size=16, face = "bold"),
		    axis.text.x = element_text(size=16, face = "bold"),
		    axis.title = element_text(size=16, face="bold"),
		    text = element_text(family="Lato")
		  )
	dev.off()

	print(paste(outputfolder,paste("ggplot_clusters_composition_age",method_name,".png",sep=""),sep="/"))
	png(paste(outputfolder,paste("ggplot_clusters_composition_age",method_name,".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		ggplot(data) +
		  geom_jitter(aes(factor(cluster), Age_Group, colour = Diagnostic), width = 0.2, size = 6) +
		  theme_classic() +
		  xlab("clusters") +
		  ylab("Age") +
		  theme(
		    axis.text.y = element_text(size=16, face = "bold"),
		    axis.text.x = element_text(size=16, face = "bold"),
		    axis.title = element_text(size=16, face="bold"),
		    text = element_text(family="Lato")
		  )
	dev.off()



	# Compose id
	new.cluster.ids.sub=c()

	# For each cluster	
	for (c in as.numeric(levels(pbmc_subgroup_phenotype@ident)))
	{
		new.cluster.ids.sub=c(new.cluster.ids.sub,paste(paste0(unlist(FindMarkers_pbmc_subgroup_phenotype[c+1]),unlist(signMarkers_pbmc_subgroup_phenotype[c+1]),colapse="."),sep="", collapse=""))
	}	
	# Replace labels
	#pbmc_subgroup_phenotype@ident <- plyr::mapvalues(x = pbmc_subgroup_phenotype@ident, from = levels(pbmc_subgroup_phenotype@ident), to = new.cluster.ids.sub)

	# Plot
	print(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V1_",method_name,".png",sep=""),sep="/"))
	png(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V1_",method_name,".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# Find variable genes
		TSNEPlot(object = pbmc_subgroup_phenotype,  do.label=T, pt.size=5, label.size = 8, do.return = TRUE)  + geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype]))+ theme(legend.text=element_text(size=16))
	dev.off()

	###################################################################################################################################
	# Here I calculate the edges and the centroids
	###################################################################################################################################
	# Set the result table
	df_centroids<- data.frame(x=c(1:length(levels(pbmc_subgroup_phenotype@ident))),y=c(1:length(levels(pbmc_subgroup_phenotype@ident))),cluster=c(1:length(levels(pbmc_subgroup_phenotype@ident))))

	# Set the result table
	df_coordinates<- data.frame()

	# Save tsne prjection
	tsnesubgroup_phenotype<-GetCellEmbeddings(pbmc_subgroup_phenotype, reduction.type = "tsne")

	IT=1
	# For each cluster
	for (c in levels(pbmc_subgroup_phenotype@ident))
	{
		# Caclulate coordinate x of medoids
		df_centroids[IT,]$x<-pam(tsnesubgroup_phenotype[names(pbmc_subgroup_phenotype@ident[which(pbmc_subgroup_phenotype@ident==c)]),], 1)$medoids[,1]

		# Caclulate coordinate y of medoids
		df_centroids[IT,]$y<-pam(tsnesubgroup_phenotype[names(pbmc_subgroup_phenotype@ident[which(pbmc_subgroup_phenotype@ident==c)]),], 1)$medoids[,2]

		# Set the name of the cluster
		df_centroids[IT,]$cluster<-c

		# Set alpha
		alpha <- 100

		# Calculate edges
		alphashape1 <- ashape(tsnesubgroup_phenotype[names(pbmc_subgroup_phenotype@ident[which(pbmc_subgroup_phenotype@ident==c)]),], alpha = alpha)

		# Szve results
		df_coordinates<-rbind(df_coordinates,data.frame(alphashape1$edges[,3:6],c))

		IT=IT+1
	}

	###################################################################################################################################
	# Here I plot results with the edges
	###################################################################################################################################
	# Plot
	print(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V2_",method_name,".png",sep=""),sep="/"))
	png(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V2_",method_name,".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# Plot TSNEPlot
		TSNEPlot<-TSNEPlot(object = pbmc_subgroup_phenotype, pt.size=5, label.size = 8, do.return = TRUE)  + geom_text(label=as.vector(dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype])) + theme(legend.text=element_text(size=15))

		# For each cluster
		for (l in levels(pbmc_subgroup_phenotype@ident))
		{
			# Add edge to the plot
			TSNEPlot <- TSNEPlot + geom_segment(data = data.frame(df_coordinates[which(df_coordinates$c==l),]), aes(x = x1, y = y1, xend = x2, yend = y2))
		}
		# Show plot
		plot(TSNEPlot)

	dev.off()

	###################################################################################################################################
	# Here I plot results with the edges annotated accordingly
	###################################################################################################################################
	# Plot
	# Plot
	print(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V3_",method_name,".png",sep=""),sep="/"))
	png(paste(outputfolder,paste("TSNEPlotClusters_subgroup_phenotypeSNN_annotated_V3_",method_name,".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
		# Set identity
		pbmc_subgroup_phenotype<-SetIdent(pbmc_subgroup_phenotype, ident.use =dataInfo[names(pbmc_subgroup_phenotype@ident),subgroup_phenotype])

		# Plot TSNEPlot
		TSNEPlot<-TSNEPlot(object = pbmc_subgroup_phenotype, pt.size=5, label.size = 8, do.return = TRUE, group.by="ident",do.label=F)   + theme(legend.text=element_text(size=15) )

		# Set identity
		pbmc_subgroup_phenotype<-SetIdent(pbmc_subgroup_phenotype, ident.use =SNN_clustrers_subgroup_phenotype)


		# Replace labels
		#pbmc_subgroup_phenotype@ident <- plyr::mapvalues(x = pbmc_subgroup_phenotype@ident, from = levels(pbmc_subgroup_phenotype@ident), to = new.cluster.ids.sub)

		# For each cluster
		for (l in levels(pbmc_subgroup_phenotype@ident))
		{
			# Add edge to the plot
			TSNEPlot <- TSNEPlot + geom_segment(data = data.frame(df_coordinates[which(df_coordinates$c==l),]), aes(x = x1, y = y1, xend = x2, yend = y2)) +  annotate("text", x = df_centroids$x, y = df_centroids$y, font = 2, size = 10,label = df_centroids$cluster)
		}

		# Show plot
		plot(TSNEPlot)

	dev.off()



	###################################################################################################################################
	# Here I plot expression of the markers
	###################################################################################################################################
	# Create plot for all the markers
	plots<-FeaturePlot(pbmc_subgroup_phenotype, unique(unlist(idMarkers_pbmc_subgroup_phenotype)), min.cutoff = NA, max.cutoff = NA, dim.1 = 1, dim.2 = 2, pt.size = 4, cols.use = c("green", "red"), pch.use = 16, overlay = FALSE, reduction.use = "tsne", use.imputed = FALSE, nCol = NULL, no.axes = FALSE, no.legend = FALSE, dark.theme = FALSE, do.return = TRUE)

	IT=1
	# For each cluster

	for (c in unique(unlist(idMarkers_pbmc_subgroup_phenotype)))
	{
		MARKER_ID<-c
		p<-plots[[MARKER_ID]] +  ggtitle(df_transimmunom[unique(unlist(idMarkers_pbmc_subgroup_phenotype))[IT],2])+  labs(color = df_transimmunom[MARKER_ID,2])+ guides(color=guide_legend(paste("expression ",as.vector(df_transimmunom[MARKER_ID,2]),sep="")))  +  annotate("text", x = df_centroids$x, y = df_centroids$y, label = df_centroids$cluster, size = 6)+ theme(legend.text=element_text(size=15))

		# For each cluster
		for (l in levels(pbmc_subgroup_phenotype@ident))
		{
			p <- p + geom_segment(data = data.frame(df_coordinates[which(df_coordinates$c==l),]), aes(x = x1, y = y1, xend = x2, yend = y2))
		}
		print(paste(outputfolder,paste("FeaturePlot_subgroup_phenotypeSNN_",method_name,"_",as.vector(df_transimmunom[unique(unlist(idMarkers_pbmc_subgroup_phenotype))[IT],2]),".png",sep=""),sep="/"))
		png(paste(outputfolder,paste("FeaturePlot_subgroup_phenotypeSNN_",method_name,"_",as.vector(df_transimmunom[unique(unlist(idMarkers_pbmc_subgroup_phenotype))[IT],2]),".png",sep=""),sep="/"), width = 8, height = 11, units = 'in', res = 600)
			plot(p)
		dev.off()
		IT<-IT+1

	}
	# Set Cluster
	dataInfo$cluster<-as.vector(pbmc_subgroup_phenotype@ident)

	write.table(dataInfo, paste(outputfolder,paste("dataInfo_subgroup_phenotype_",method_name,".txt",sep=""),sep="/"), row.names=TRUE, col.names=TRUE,sep="\t", append=FALSE, quote=FALSE)

	# Find markers for cluster
	# Find markers for cluster
	ROC_Final<- FindAllMarkers(pbmc_subgroup_phenotype, logfc.threshold = 0.25, test.use = "roc", min.pct = 0.1, min.diff.pct = -Inf, print.bar = TRUE, only.pos = FALSE, max.cells.per.ident = Inf, random.seed = 1, latent.vars = "nUMI",  min.cells = 3, pseudocount.use = 1, assay.type = "RNA") 

	# ROC take only predictive power greater than 0.5
	ROC_Final<-ROC_Final[which(ROC_Final$power>0.5),]

	# Save the "Markers" for each diagnostic - TODO
	write.xlsx(ROC_Final, file=paste(outputfolder,"/Markers_Cluster.xlsx",sep="/"), sheetName=method_name, append=TRUE)

	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
	try(dev.off(),silent = TRUE)
}
