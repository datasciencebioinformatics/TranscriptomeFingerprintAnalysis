#!/usr/bin/env Rscript



############################################################################################################################################

# Rscript that receives the input data file with the reads count, and the data infor, then, 
# normalize the data groupping the samples by groups and diagnosis
# Usage : Rscript --vanilla /data/transimmunom/rnaSeq/scripts/RNASeqNormalization.R database tableReadsCount dataInfo group_phenotype ref_group_phenotype subgroup_phenotype ref_subgroup_phenotype covariate1 covariate2 analysis_level_name outputfolder
#

###########################################################################################################################################

# Load library 
options(java.parameters = "-Xmx16000m")
# Load library 

library("RSQLite")
library("systemPipeR")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("gridExtra")
library("grid")
library("lattice")
library("pvca")
library("geneplotter")
library("org.Hs.eg.db")
library("org.Mm.eg.db")
library("genefilter")
library("xlsx")
library("topGO")
library("biomaRt")
library("matrixStats")
library("reshape")
library("GenomicFeatures")




############################################################################################################################################
# First read the arguments
args = commandArgs(trailingOnly=TRUE)

# Read database
database="human"

# Read the inputdatafile argument - Path to raw counts file
file_tableReadsCount="all_reads_count.gene.txt"

# Read the inputdatafile2 argument - Path to data Info
file_dataInfo="dataInfo.txt"

# Read the group_phenotype name
group_phenotype="Sample_Group"

# Read the reference for the group_phenotype
ref_group_phenotype="healthy"

# Read the subgroup_phenotype name
subgroup_phenotype="Diagnostic"

# Read the reference for the subgroup_phenotype
ref_subgroup_phenotype="healthy"

# Read the covariate 1
covariate1="Sex"

# Read the covariate 2
covariate2="Age_Group"

# Read the analysis_level
analysis_level_name="gene"
				      
# Read the outputfolder argument - Path to output folder reslts
outputfolder="/markers_detection/"

# Read the outputfolder argument
batch_run="Run"

# If it is to correct the batch
batch_cor="noBatch"

############################################################################################################################################
# Create output
dir.create(outputfolder)

############################################################################################################################################

# Functions
# Function to convert IDs
convertIDs2 <- function( ids, from, to, db) {
  stopifnot( inherits( db, "AnnotationDb" ) )
  suppressWarnings( selRes <- AnnotationDbi::select(
	db, keys=ids, keytype=from, columns=c(from,to) ) )
  return( selRes[ match( ids, selRes[,1] ), 2 ] )

}



# Function to convert IDs
convertIDs <- function( ids, from, to, db) 
{
	# Return ID
	return(getBM(attributes = c(from, to), filters = "ensembl_transcript_id", values = ids, mart = db)[,2])   

}



		

############################################################################################################################################

# Setting the analysis_level
if ( analysis_level_name=="transcript") 
{
	# Set the analysis level
	analysis_level="ENSEMBLTRANS"
}else	

{
	# Set the analysis level
	analysis_level="ENSEMBL"
}



############################################################################################################################################

# Initialize mart object
mart = useMart("ensembl")

############################################################################################################################################


# Setting the annotation
# If species is human
if ( database=="human")
{
        # Get the annotation
        anno = org.Hs.eg.db
        mapping = "org.Hs.eg.db"
        dataset="hsapiens_gene_ensembl"
        mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="www.ensembl.org", path="/biomart/martservice" ,dataset=dataset)
}else

{
        # If not, species is equal mouse
        # Get the annotation
        anno = org.Mm.eg.db
        mapping = "org.Mm.eg.db"
        dataset="mmusculus_gene_ensembl"
        mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="www.ensembl.org", dataset=dataset)
}



############################################################################################################################################
# Load maxtrix as table
tableReadsCount_raw<-read.table(file_tableReadsCount,header = TRUE,row.names=1, check.names = FALSE)


# Sort the columns of the table"ENSEMBL"
tableReadsCount_raw<-tableReadsCount_raw[ , order(names(tableReadsCount_raw))]


# Load maxtrix as table
dataInfo<-data.frame(read.table(file_dataInfo,header = TRUE))

row.names(dataInfo)<-dataInfo$Sample_Name

# Sort the rows of the table
dataInfo<-dataInfo[ order(row.names(dataInfo)), ]

# Transform Run coluln into factor
dataInfo[,batch_run]<-as.factor(dataInfo[,batch_run])

print(dataInfo)


############################################################################################################################################
# Create DESeq object from data, grouped by Diagnostic
DESeqData_subgroup_phenotype <- DESeqDataSetFromMatrix(countData = tableReadsCount_raw,colData = dataInfo,design = as.formula(paste("~",batch_run,"+",covariate1,"+",subgroup_phenotype)))


############################################################################################################################################

# Comparison will be the last level of this variable over the first level - Sample_subgroup
DESeqData_subgroup_phenotype <- DESeq(DESeqData_subgroup_phenotype)

# Replace normalized data for DESEq2 norm data
vst<-assay(varianceStabilizingTransformation(DESeqData_subgroup_phenotype, blind=FALSE))
lognorm<-assay(normTransform(DESeqData_subgroup_phenotype) )

 
# Take all symbols <- 
symbol_norm<-AnnotationDbi::select(anno, keys=rownames(vst), columns=c("SYMBOL","GENENAME","ENTREZID","ENSEMBL"), keytype="ENSEMBL", multiVals=first)
symbol_norm<-AnnotationDbi::select(anno, keys=c("list of ids"), columns=c("SYMBOL","GENENAME","ENTREZID","ENSEMBL"), keytype="ENTREZID", multiVals=first)



