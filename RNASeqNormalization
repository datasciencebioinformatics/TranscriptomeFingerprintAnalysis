#!/usr/bin/env Rscript
############################################################################################################################################
# Rscript that receives the input data file with the reads count, and the data infor, then, 
# normalize the data groupping the samples by groups and diagnosis
# Usage : Rscript --vanilla /data/transimmunom/rnaSeq/scripts/RNASeqNormalization.R database tableReadsCount dataInfo group_phenotype ref_group_phenotype subgroup_phenotype ref_subgroup_phenotype covariate1 covariate2 analysis_level_name outputfolder
###########################################################################################################################################
# Load library 

options(java.parameters = "-Xmx16000m")
library("RSQLite")
library("systemPipeR")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("gridExtra")
library("grid")
library("lattice")
library("pvca")
library("geneplotter")
library("org.Hs.eg.db")
library("org.Mm.eg.db")
library("genefilter")
library("xlsx")
library("topGO")
library("biomaRt")
library("matrixStats")
library("reshape")

############################################################################################################################################
# First read the arguments
args = commandArgs(trailingOnly=TRUE)

# Read database
database=args[1]

# Read the inputdatafile argument
file_tableReadsCount=args[2]

# Read the inputdatafile2 argument
file_dataInfo=args[3]

# Read the group_phenotype name
group_phenotype=args[4]

# Read the reference for the group_phenotype
ref_group_phenotype=args[5]

# Read the subgroup_phenotype name
subgroup_phenotype=args[6]

# Read the reference for the subgroup_phenotype
ref_subgroup_phenotype=args[7]

# Read the covariate 1
covariate1=args[8]

# Read the covariate 2
covariate2=args[9]

# Read the analysis_level
analysis_level_name=args[10]
				      
# Read the outputfolder argument
outputfolder=args[11]

# Read the outputfolder argument
batch_run=args[12]


############################################################################################################################################
																																																																																																																																																																																								
# Create output
dir.create(outputfolder)



############################################################################################################################################

# Functions
# Function to convert IDs
convertIDs2 <- function( ids, from, to, db) {
  stopifnot( inherits( db, "AnnotationDb" ) )
  suppressWarnings( selRes <- AnnotationDbi::select(
	db, keys=ids, keytype=from, columns=c(from,to) ) )
  return( selRes[ match( ids, selRes[,1] ), 2 ] )

}



# Function to convert IDs
convertIDs <- function( ids, from, to, db) 
{
	# Return ID
	return(getBM(attributes = c(from, to), filters = "ensembl_transcript_id", values = ids, mart = db)[,2])   

}



		

############################################################################################################################################

# Setting the analysis_level
if ( analysis_level_name=="transcript") 
{
	# Set the analysis level
	analysis_level="ENSEMBLTRANS"
}else	

{
	# Set the analysis level
	analysis_level="ENSEMBL"
}



############################################################################################################################################

# Initialize mart object
mart = useMart("ensembl")

############################################################################################################################################

# Setting the annotation
# If species is human
if ( database=="human") 
{
	# Get the annotation
	anno = org.Hs.eg.db
	mapping = "org.Hs.eg.db"
	dataset="hsapiens_gene_ensembl"
	mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", path="/biomart/martservice" ,dataset=dataset)
}else	

{
	# If not, species is equal mouse
	# Get the annotation
	anno = org.Mm.eg.db
	mapping = "org.Mm.eg.db"
	dataset="mmusculus_gene_ensembl"
	mart = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset=dataset)
}





############################################################################################################################################
# Load maxtrix as table
tableReadsCount<-read.table(file_tableReadsCount,header = TRUE,row.names=1, check.names = FALSE)


# Sort the columns of the table
tableReadsCount<-tableReadsCount[ , order(names(tableReadsCount))]


# Load maxtrix as table
dataInfo<-data.frame(read.table(file_dataInfo,header = TRUE,row.names=4))

# Sort the rows of the table
dataInfo<-dataInfo[ order(row.names(dataInfo)), ]

# Transform Run coluln into factor
dataInfo[,batch_run]<-as.factor(dataInfo[,batch_run])


# Create DESeq object from data, grouped by Sample_Group
DESeqData_group_phenotype <- DESeqDataSetFromMatrix(countData = tableReadsCount,colData = dataInfo,design = as.formula(paste("~",group_phenotype)))

# Create DESeq object from data, grouped by Diagnostic
DESeqData_subgroup_phenotype <- DESeqDataSetFromMatrix(countData = tableReadsCount,colData = dataInfo,design = as.formula(paste("~", subgroup_phenotype)))

# Create DESeq object from data, grouped by Sample_Group
DESeqData_covariate2 <- DESeqDataSetFromMatrix(countData = tableReadsCount,colData = dataInfo,design = as.formula(paste("~",covariate2)))


############################################################################################################################################

# Pre-filtering - removing rows in which there are no reads or nearly no reads
# Filter DESeq object grouped by Sample_Group
DESeqData_group_phenotype <- DESeqData_group_phenotype[ rowSums(counts(DESeqData_group_phenotype)) > 1, ]

# Filter DESeq object grouped by Diagnostic
DESeqData_subgroup_phenotype <- DESeqData_subgroup_phenotype[ rowSums(counts(DESeqData_subgroup_phenotype)) > 1, ]

# Filter DESeq object grouped by covariate2
DESeqData_covariate2 <- DESeqData_covariate2[ rowSums(counts(DESeqData_covariate2)) > 1, ]


############################################################################################################################################

# Differential expression analysis
# Comparison will be the last level of this variable over the first level - Sample_Group
DESeqData_group_phenotype <- DESeq(DESeqData_group_phenotype)

# Comparison will be the last level of this variable over the first level - Sample_subgroup
DESeqData_subgroup_phenotype <- DESeq(DESeqData_subgroup_phenotype)

# Comparison will be the last level of this variable over the first level - Covariate2
DESeqData_covariate2 <- DESeq(DESeqData_covariate2)


############################################################################################################################################
# Quality control Data quality assessment by sample clustering and visualization
# Heatmap of the count matrix
# Select genes
select_group_phenotype<- order(rowMeans(counts(DESeqData_group_phenotype,normalized=TRUE)),decreasing=TRUE)[1:200]

# Transoform data for group_phenotype- defaults to log2(x+1)
nt_group_phenotype<- normTransform(DESeqData_group_phenotype) 

# Take the normalized values for selected genes from group_phenotypevsd
vsd_group_phenotype<- varianceStabilizingTransformation(DESeqData_group_phenotype, blind=FALSE)

# Take the normalized values for selected genes from Diagnostic vsd
vsd_subgroup_phenotype <- varianceStabilizingTransformation(DESeqData_subgroup_phenotype, blind=FALSE)

# Take the normalized values for selected genes from covariate2
vsd_covariate2 <- varianceStabilizingTransformation(DESeqData_covariate2, blind=FALSE)

# Take the normalized values for selected genes from group_phenotypelog2.norm
log2.norm.counts_group_phenotype<- assay(nt_group_phenotype)[select_group_phenotype,]

# Take the normalized values for all genes from group_phenotypelog2.norm
log2.norm.counts_group_phenotype_all<- assay(nt_group_phenotype)

# Take the normalized values for selected genes from group_phenotypevsd
vsd.counts_group_phenotype<- assay(vsd_group_phenotype)[select_group_phenotype,]

# Take the normalized values for selected genes from group_phenotypevsd
vsd.counts_group_phenotype_all<- assay(vsd_group_phenotype)


# Take the normalized values for selected genes from covariate2
vsd.counts_covariate2<- assay(vsd_covariate2)[select_group_phenotype,]


# Create data frame with data - Sample_Group
df_group_phenotype<- as.data.frame(colData(DESeqData_group_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])



# Set the row names
rownames(df_group_phenotype)<-colnames(log2.norm.counts_group_phenotype)


# Set the col names
colnames(df_group_phenotype)<-c(group_phenotype,subgroup_phenotype,covariate1,covariate2)


# Save plot
png(paste(outputfolder,"/heatmap_selected_log2_norm_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - group_phenotype- log2.norm
	pheatmap(log2.norm.counts_group_phenotype, cluster_rows=FALSE, show_rownames=FALSE,cluster_cols=FALSE, annotation_col=df_group_phenotype)

dev.off()



# Save plot
png(paste(outputfolder,"/heatmap_selected_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)
	# Second heatmap - group_phenotype- assay(rld)
	pheatmap(vsd.counts_group_phenotype, cluster_rows=FALSE, show_rownames=FALSE,cluster_cols=FALSE, annotation_col=df_group_phenotype)
dev.off()


# Save plot
png(paste(outputfolder,"/heatmap_all_log2_norm_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - group_phenotype- log2.norm
	pheatmap(log2.norm.counts_group_phenotype_all, cluster_rows=FALSE, show_rownames=FALSE,cluster_cols=FALSE, annotation_col=df_group_phenotype)

dev.off()


# Save plot
png(paste(outputfolder,"/heatmap_all_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)
	# Second heatmap - group_phenotype- assay(rld)
	pheatmap(vsd.counts_group_phenotype_all, cluster_rows=FALSE, show_rownames=FALSE,cluster_cols=FALSE, annotation_col=df_group_phenotype)
dev.off()


# Save plot
png(paste(outputfolder,"/heatmap_all_log2_norm_countHclusters.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - group_phenotype- log2.norm
	pheatmap(log2.norm.counts_group_phenotype_all, cluster_rows=TRUE, show_rownames=FALSE,cluster_cols=TRUE, annotation_col=df_group_phenotype)

dev.off() 


# Save plot
png(paste(outputfolder,"/heatmap_all_vsd_countsHcluster.png",sep=""), width = 8, height = 11, units = 'in', res = 600)
	# Second heatmap - group_phenotype- assay(rld)
	pheatmap(vsd.counts_group_phenotype_all, cluster_rows=TRUE, show_rownames=FALSE,cluster_cols=TRUE, annotation_col=df_group_phenotype)
dev.off()



############################################################################################################################################
# Quality control Data quality assessment by sample clustering and visualization
# Heatmap of the sample-to-sample distances only top 1000 genes

# Calculate the distance - group_phenotype
sampleDists_group_phenotype <- dist(t(assay(vsd_group_phenotype)))

# Calculate the distance - subgroup_phenotype
sampleDists_subgroup_phenotype <- dist(t(assay(vsd_subgroup_phenotype)))

# Calculate the distance - covariate2
sampleDists_covariate2 <- dist(t(assay(vsd_covariate2)))

# Calculate the distance - covariate2
sampleDists_raw <- dist(t(counts(DESeqData_group_phenotype,normalized=FALSE)))

# Get distance matrix - group_phenotype
sampleDistMatrix_group_phenotype <- as.matrix(sampleDists_group_phenotype)

# Get distance matrix - subgroup_phenotype
sampleDistMatrix_subgroup_phenotype <- as.matrix(sampleDists_subgroup_phenotype)

# Get distance matrix - covariate2
sampleDistMatrix_covariate2 <- as.matrix(sampleDists_covariate2)

# Get distance matrix - subgroup_phenotype
sampleDistMatrix_raw <- as.matrix(sampleDists_raw)

# Set colors
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)



# Save plot
png(paste(outputfolder,"/heatmap_sampleToSample_group_phenotype_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)
	# First heatmap - group_phenotype
	pheatmap(sampleDistMatrix_group_phenotype,clustering_distance_rows=sampleDists_group_phenotype,clustering_distance_cols=sampleDists_group_phenotype,col=colors, annotation_col=df_group_phenotype, show_rownames=FALSE)
dev.off()



# Save plot
png(paste(outputfolder,"/heatmap_sampleToSample_subgroup_phenotype_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - subgroup_phenotype
	pheatmap(sampleDistMatrix_subgroup_phenotype,clustering_distance_rows=sampleDists_subgroup_phenotype,clustering_distance_cols=sampleDists_subgroup_phenotype,col=colors, annotation_col=df_group_phenotype, show_rownames=FALSE)

dev.off()


# Save plot
png(paste(outputfolder,"/heatmap_sampleToSample_covariate2_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - subgroup_phenotype
	pheatmap(sampleDistMatrix_covariate2,clustering_distance_rows=sampleDists_covariate2,clustering_distance_cols=sampleDists_covariate2,col=colors, annotation_col=df_group_phenotype, show_rownames=FALSE)

dev.off()


# Save plot
png(paste(outputfolder,"/heatmap_sampleToSample_raw.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# First heatmap - subgroup_phenotype
	pheatmap(sampleDistMatrix_raw,clustering_distance_rows=sampleDists_raw,clustering_distance_cols=sampleDists_raw,col=colors, annotation_col=df_group_phenotype, show_rownames=FALSE)

dev.off()






############################################################################################################################################
# Quality control Data quality assessment by sample clustering and visualization - PCA
# Principal component plot of the samples

# Create plots
p1<-plotPCA(vsd_group_phenotype, intgroup=c(group_phenotype), ntop = nrow(assay(vsd_group_phenotype)))+ labs(color = "") 
p2<-plotPCA(vsd_group_phenotype, intgroup=c(subgroup_phenotype),ntop = nrow(assay(vsd_group_phenotype)))+ labs(color = "")
p3<-plotPCA(vsd_group_phenotype, intgroup=c(covariate1), ntop = nrow(assay(vsd_group_phenotype)))+ labs(color = "")
p4<-plotPCA(vsd_group_phenotype, intgroup=c(covariate2), ntop = nrow(assay(vsd_group_phenotype)))+ labs(color = "")

# Save plot
png(paste(outputfolder,"/pca_group_phenotype_vsd_group_phenotype.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p1
dev.off()

# Save plot
png(paste(outputfolder,"/pca_group_phenotype_vsd_subgroup_phenotype.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p2
dev.off()

# Save plot
png(paste(outputfolder,"/pca_group_phenotype_vsd_covariate1.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p3
dev.off()

# Save plot
png(paste(outputfolder,"/pca_group_phenotype_vsd_covariate2.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p4
dev.off()



# Save plot
g <- arrangeGrob(p1,p2,p3,p4,nrow = 2, padding = unit(0.0, "line")) #generates g
ggsave(file=paste(outputfolder,"/pca_group_phenotype_vsd_counts.png",sep=""), g, units = 'in', dpi = 600,width = 11, height = 11) #saves g






# Personalize PCA plot
data_group_phenotype <- plotPCA(vsd_group_phenotype, intgroup=c(subgroup_phenotype, covariate1,covariate2), returnData=TRUE , ntop = nrow(assay(vsd_group_phenotype)))
percentVar_group_phenotype <- round(100 * attr(data_group_phenotype, "percentVar"))



# Save plot
png(paste(outputfolder,"/pca2_group_phenotype_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	

	# Plot Personalized PCA - group_phenotype
	ggplot(data_group_phenotype, aes_string("PC1", "PC2", color=subgroup_phenotype)) + geom_point(size=3) + xlab(paste0("PC1: ",percentVar_group_phenotype[1],"% variance")) + ylab(paste0("PC2: ",percentVar_group_phenotype[2],"% variance")) + coord_fixed()	+geom_text(aes(label=name),hjust=0, vjust=0)

dev.off()



# Save plot
p1<-plotPCA(vsd_subgroup_phenotype, intgroup=c(group_phenotype), ntop = nrow(assay(vsd_subgroup_phenotype)))+ labs(color = "") 
p2<-plotPCA(vsd_subgroup_phenotype, intgroup=c(subgroup_phenotype), ntop = nrow(assay(vsd_subgroup_phenotype)))+ labs(color = "") 
p3<-plotPCA(vsd_subgroup_phenotype, intgroup=c(covariate1), ntop = nrow(assay(vsd_subgroup_phenotype)))+ labs(color = "") 
p4<-plotPCA(vsd_subgroup_phenotype, intgroup=c(covariate2), ntop = nrow(assay(vsd_subgroup_phenotype)))+ labs(color = "") 

# Save plot
png(paste(outputfolder,"/pca_subgroup_phenotype_vsd_group_phenotype.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p1
dev.off()

# Save plot
png(paste(outputfolder,"/pca_subgroup_phenotype_vsd_subgroup_phenotype.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p2
dev.off()

# Save plot
png(paste(outputfolder,"/pca_subgroup_phenotype_vsd_covariate1.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p3
dev.off()

# Save plot
png(paste(outputfolder,"/pca_subgroup_phenotype_vsd_covariate2.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	p4
dev.off()


# Save plot
g <- arrangeGrob(p1,p2,p3,p4,nrow = 2, padding = unit(0.0, "line")) #generates g
ggsave(file=paste(outputfolder,"/pca_subgroup_phenotype_vsd_counts.png",sep=""), g, units = 'in', dpi = 600,width = 11, height = 11) #saves g


# Personalize PCA plot
data_subgroup_phenotype <- plotPCA(vsd_subgroup_phenotype, intgroup=c(subgroup_phenotype, covariate1,covariate2), returnData=TRUE , ntop = nrow(assay(vsd_subgroup_phenotype)))
percentVar_subgroup_phenotype <- round(100 * attr(data_subgroup_phenotype, "percentVar"))



# Save plot
png(paste(outputfolder,"/pca2_subgroup_phenotype_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# Plot Personalized PCA - subgroup_phenotype
	ggplot(data_subgroup_phenotype, aes_string("PC1", "PC2", color=subgroup_phenotype)) + geom_point(size=3) + xlab(paste0("PC1: ",percentVar_subgroup_phenotype[1],"% variance")) + ylab(paste0("PC2: ",percentVar_subgroup_phenotype[2],"% variance")) + coord_fixed() +geom_text(aes(label=name),hjust=0, vjust=0)
dev.off()


# Create plots
p1<-plotPCA(vsd_covariate2, intgroup=c(group_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
p2<-plotPCA(vsd_covariate2, intgroup=c(subgroup_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
p3<-plotPCA(vsd_covariate2, intgroup=c(covariate1), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
p4<-plotPCA(vsd_covariate2, intgroup=c(covariate2), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 


# Save plot
g <- arrangeGrob(p1,p2,p3,p4,nrow = 2, padding = unit(0.0, "line")) #generates g
ggsave(file=paste(outputfolder,"/pca_covariate2_vsd_counts.png",sep=""), g, units = 'in', dpi = 600,width = 11, height = 11) #saves g



# Personalize PCA plot
data_covariate2 <- plotPCA(vsd_covariate2, intgroup=c(subgroup_phenotype, covariate1,covariate2), returnData=TRUE, ntop = nrow(assay(vsd_covariate2)))
percentVar_covariate2 <- round(100 * attr(data_covariate2, "percentVar"))



# Save plot
png(paste(outputfolder,"/pca2_covariate2_vsd_counts.png",sep=""), width = 8, height = 11, units = 'in', res = 600)	
	# Plot Personalized PCA - subgroup_phenotype
	ggplot(data_covariate2, aes_string("PC1", "PC2", color=subgroup_phenotype)) + geom_point(size=3) + xlab(paste0("PC1: ",percentVar_covariate2[1],"% variance")) + ylab(paste0("PC2: ",percentVar_covariate2[2],"% variance")) + coord_fixed() +geom_text(aes(label=name),hjust=0, vjust=0)
dev.off()



############################################################################################################################################
# Quality control and Normalization of the count data
# Save plot
png(paste(outputfolder,"/multidensity_counts.png",sep=""), width = 11, height = 11, units = 'in', res = 600)	
	multidensity( counts(DESeqData_group_phenotype, normalized = T), xlab="mean counts", xlim=c(0, 1000))	
dev.off()	



# Save plot
png(paste(outputfolder,"/multiecdf_counts.png",sep=""), width = 11, height = 11, units = 'in', res = 600)	
	multiecdf( counts(DESeqData_group_phenotype, normalized = T),xlab="mean counts", xlim=c(0, 1000))		
dev.off()



# If species is human

if ( database=="human") 

{

	# Set the markers
	ids_gene=c()

		

}else	

{

	# If not, species is equal mouse
	ids_gene=c("ENSMUSG00000026770","ENSMUSG00000039521","ENSMUSG00000026011","ENSMUSG00000023274","ENSMUSG00000029580","ENSMUSG00000057666")

}



# Quality control and Normalization of the count data - Markers
# Create a table - each row will have information about one gene, each column about one sample
# Set the analysis level
anno_group_phenotype2 <-AnnotationDbi::select(anno, keys=ids_gene, columns=c("ENSEMBL","ENSEMBLTRANS","SYMBOL"), keytype=analysis_level)
			  
# Selecting annotation only for the DE genes
anSig_anno_group_phenotype2 <- as.data.frame(anno_group_phenotype2[anno_group_phenotype2[,"ENSEMBL"] %in% ids_gene,])

	
# Setting the analysis_level
if ( analysis_level_name=="gene") 
{
	# Take the expression of the markers
	markers_expression_norm<-counts(DESeqData_group_phenotype,normalized=TRUE)[which(rownames(counts(DESeqData_group_phenotype,normalized=TRUE)) %in% anSig_anno_group_phenotype2$ENSEMBL),]
	markers_expression_raw<-counts(DESeqData_group_phenotype,normalized=FALSE)[which(rownames(counts(DESeqData_group_phenotype,normalized=TRUE)) %in% anSig_anno_group_phenotype2$ENSEMBL),]

}else

{
	# Take the expression of the markers
	markers_expression_norm<-counts(DESeqData_group_phenotype,normalized=TRUE)[which(rownames(counts(DESeqData_group_phenotype,normalized=TRUE)) %in% anSig_anno_group_phenotype2$ENSEMBLTRANS),]
	markers_expression_raw<-counts(DESeqData_group_phenotype,normalized=FALSE)[which(rownames(counts(DESeqData_group_phenotype,normalized=TRUE)) %in% anSig_anno_group_phenotype2$ENSEMBLTRANS),]
	
}

# Take all symbols <- 
symbol_norm<-AnnotationDbi::select(anno, keys=rownames(markers_expression_norm), columns=c("SYMBOL"), keytype=analysis_level, multiVals=first)
# Only frst occurence
symbol_norm<-symbol_norm[!duplicated(symbol_norm$ENSEMBL), ]
rownames(markers_expression_norm) <- symbol_norm$SYMBOL
rownames(markers_expression_raw) <- symbol_norm$SYMBOL



# Melt the plots
markers_expression_norm_m<-melt(markers_expression_norm)	
markers_expression_raw_m<-melt(markers_expression_raw)	

# Take the col names
colnames(markers_expression_norm_m)<-c("Marker","Saple_names_id","Expression")
colnames(markers_expression_raw_m)<-c("Marker","Saple_names_id","Expression")

# Take row names
Saple_names_id<-rownames(dataInfo)

# Merge tables
markers_expression_norm_m<-merge(markers_expression_norm_m, cbind(dataInfo,Saple_names_id),by=paste("Saple_names_id"), all.x=TRUE, all.y=TRUE)
markers_expression_raw_m<-merge(markers_expression_raw_m, cbind(dataInfo,Saple_names_id),by=paste("Saple_names_id"), all.x=TRUE, all.y=TRUE)




png(paste(outputfolder,"/markers_normreads_per_sample.png",sep=""), width = 22, height = 22, units = 'in', res = 1000)
	ggplot(markers_expression_norm_m, aes(x=Saple_names_id, y=Expression, fill=Sample)) + geom_bar(stat = "identity") + facet_grid(. ~ Marker) + labs(x="")  + scale_y_continuous("Norm expression")+ theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +  theme(axis.text.x = element_text(size=22),axis.text.y = element_text(size=22), axis.title.x = element_text(size=22),axis.title.y = element_text(size=22), strip.text.x=element_text(size = 22), strip.text.y=element_text(size = 22) ,legend.text=element_text(size=22))
dev.off()

png(paste(outputfolder,"/markers_rawreads_per_sample.png",sep=""), width = 22, height = 22, units = 'in', res = 1000)
	ggplot(markers_expression_raw_m, aes(x=Saple_names_id, y=Expression, fill=Sample)) + geom_bar(stat = "identity") + facet_grid(. ~ Marker) + labs(x="")  + scale_y_continuous("Norm expression")+ theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +  theme(axis.text.x = element_text(size=22),axis.text.y = element_text(size=22), axis.title.x = element_text(size=22),axis.title.y = element_text(size=22), strip.text.x=element_text(size = 22), strip.text.y=element_text(size = 22) ,legend.text=element_text(size=22))
dev.off()


 

############################################################################################################################################
# For all levels against reference level on the group_phenotype
for (i in c(levels(dataInfo[,group_phenotype ])[which(levels(dataInfo[,group_phenotype ])!=ref_group_phenotype)]))
{
	# Create output
	dir.create(file.path(outputfolder, paste(i,ref_group_phenotype,sep="_")))

	# Output results folder
	resoutputfolder<-paste(outputfolder,paste(i,ref_group_phenotype,sep="_"),sep="/")

	# Differential expression analysis for group_phenotype
	resMFgroup_phenotype <- DESeq2::results(DESeqData_group_phenotype,contrast=c(group_phenotype, i, ref_group_phenotype), independentFiltering=FALSE)  

	
	# MA plots - group_phenotype
	png(paste(resoutputfolder,"MAplots.png",sep="/"), width = 8, height = 8, units = 'in', res = 600)
		plotMA(resMFgroup_phenotype, main=paste(i,ref_group_phenotype,sep=" vs. "), alpha=0.1, ylim=c(-4,4))
	dev.off()	

	# Replace NA with 1
	resMFgroup_phenotype$padj<-replace(resMFgroup_phenotype$padj,which(is.na(resMFgroup_phenotype$padj)),1)



	# Take the top most up and down regulated - group_phenotype 
	resMFgroup_phenotype_sig = resMFgroup_phenotype[ resMFgroup_phenotype$padj < 0.1, ]



	# Only logFoldchange greater than zero
	resMFgroup_phenotype_up<-resMFgroup_phenotype_sig[resMFgroup_phenotype_sig$log2FoldChange > 0,]



	# Only logFoldchange smaller than zero
	resMFgroup_phenotype_down<-resMFgroup_phenotype_sig[resMFgroup_phenotype_sig$log2FoldChange < 0,]



	# Order most upregulared
	resMFgroup_phenotype_up<-resMFgroup_phenotype_up[ order( resMFgroup_phenotype_up$padj ), ]



	# Order most downregulated
	resMFgroup_phenotype_down<-resMFgroup_phenotype_down[ order( resMFgroup_phenotype_down$padj ), ]



	# Take the top genes
	topgenes <- c(rownames(resMFgroup_phenotype_up),rownames(resMFgroup_phenotype_down))



	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	

		mat <- assay(vsd_group_phenotype)[topgenes,]
		mat <- mat - rowMeans(mat)

		# Create data frame with data - group_phenotype
		df_group_phenotype <- as.data.frame(colData(DESeqData_group_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_group_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)

	dev.off()


	# Plot heatmap of most diferentially expressed -only compared sampples
	png(paste(resoutputfolder,"Heatmap_DE_onlyComparisson.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	

		mat <- assay(vsd_group_phenotype)[topgenes,rownames(dataInfo[c(which(dataInfo[,group_phenotype ]==i),which(dataInfo[,group_phenotype ]==ref_group_phenotype)),])]
		mat <- mat - rowMeans(mat)

		# Create data frame with data - group_phenotype
		df_group_phenotype <- as.data.frame(colData(DESeqData_group_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		df_group_phenotype <- df_group_phenotype[which(rownames(df_group_phenotype) %in% rownames(dataInfo[c(which(dataInfo[,group_phenotype ]==i),which(dataInfo[,group_phenotype ]==ref_group_phenotype)),])),]
		pheatmap(mat, annotation_col=df_group_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)

	dev.off()

		

	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE_UP.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	
		mat <- assay(vsd_group_phenotype)[rownames(resMFgroup_phenotype_up),]				
		mat <- mat - rowMeans(mat)
		# Create data frame with data - group_phenotype
		df_group_phenotype <- as.data.frame(colData(DESeqData_group_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_group_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)
	dev.off()	

	

	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE_DOWN.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)
		mat <- assay(vsd_group_phenotype)[rownames(resMFgroup_phenotype_down),]				
		mat <- mat - rowMeans(mat)
		# Create data frame with data - group_phenotype
		df_group_phenotype <- as.data.frame(colData(DESeqData_group_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_group_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)
	dev.off()		



	# Create plots
	p1<-plotPCA(vsd_group_phenotype[topgenes, ], intgroup=c(group_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p2<-plotPCA(vsd_group_phenotype[topgenes, ], intgroup=c(subgroup_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p3<-plotPCA(vsd_group_phenotype[topgenes, ], intgroup=c(covariate1), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p4<-plotPCA(vsd_group_phenotype[topgenes, ], intgroup=c(covariate2), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 


	# Save plot
	g <- arrangeGrob(p1,p2,p3,p4,nrow = 2, padding = unit(0.0, "line")) #generates g
	ggsave(file=paste(resoutputfolder,"/pca_DE.png",sep=""), g, units = 'in', dpi = 600,width = 11, height = 11) #saves g


	

	# Plot counts of N differentially expressed genes
	# Number of differentially exptressed genes

	N=25



	# Number of panels
	R=5



	## Sample_group
	# Create an empy list
	l_UP<-list()

	# Create an empy list
	l_DOWN<-list()

	# For the N most differentially expressed genes
	for (j in 1:N) 
	{

		# Initialize plots
		p_UP<-ggplot()	
		

		# Initialize plots
		p_DOWN<-ggplot()	

		if (j<=dim(resMFgroup_phenotype_up)[1])

		{



			# Create the counts for the gene
			geneCounts_UP <- plotCounts(DESeqData_group_phenotype[,c(which(dataInfo[,group_phenotype ]==i),which(dataInfo[,group_phenotype ]==ref_group_phenotype))], gene=row.names(resMFgroup_phenotype_up[j,]), intgroup=c(group_phenotype),returnData=TRUE, normalized = TRUE)

			
			# Plot the data
			p_UP<-ggplot(geneCounts_UP, aes_string(x=group_phenotype, y="count",group=1)) + scale_y_log10() + geom_point(size=2) + stat_summary(fun.y=mean, geom="line") + theme(legend.position="none")+ ggtitle(row.names(resMFgroup_phenotype_up[j,])) + xlab("")+ ylab("")  +  theme(plot.title = element_text(size = 8), text = element_text(size=6))			

		}

		

		if (j<=dim(resMFgroup_phenotype_down)[1])

		{

			# Create the counts for the gene
			geneCounts_DOWN <- plotCounts(DESeqData_group_phenotype[,c(which(dataInfo[,group_phenotype ]==i),which(dataInfo[,group_phenotype ]==ref_group_phenotype))], gene=row.names(resMFgroup_phenotype_down[j,]), intgroup=c(group_phenotype),returnData=TRUE, normalized = TRUE)

			

			# Plot the data
			p_DOWN<-ggplot(geneCounts_DOWN, aes_string(x=group_phenotype, y="count", group=1)) + scale_y_log10() + geom_point(size=2) +  stat_summary( fun.y=mean, geom="line") + theme(legend.position="none")+ ggtitle(row.names(resMFgroup_phenotype_down[j,])) + xlab("")+ ylab("")   +  theme(plot.title = element_text(size = 8), text = element_text(size=6))	

		}

		

		

		# Add plot to the list

		l_UP[[j]]<-p_UP



		# Add plot to the list

		l_DOWN[[j]]<-p_DOWN

		

		

	}

	# Diff genes - group_phenotype
	png(paste(resoutputfolder,"DiffGenesUP.png",sep="/"), width = 11, height = 11, units = 'in', res = 600)

		do.call("grid.arrange", c(l_UP, ncol=R))

	dev.off()



	# Diff genes - group_phenotype
	png(paste(resoutputfolder,"DiffGenesDOWN.png",sep="/"), width = 11, height = 11, units = 'in', res = 600)

		do.call("grid.arrange", c(l_DOWN, ncol=R))

	dev.off()

					 

	# Take annotation of all genes
	anno_group_phenotype <- AnnotationDbi::select(anno, 

				   keys=rownames(resMFgroup_phenotype), 

				  columns=c("SYMBOL","SYMBOL", "GENENAME"),

				  keytype=analysis_level)

				  

	# Take annotation of all genes
	anno_group_phenotype2 <- getBM(attributes=c("chromosome_name","ensembl_gene_id","entrezgene", "ensembl_transcript_id","external_gene_name","description"), mart=mart)					 				  
		
				  

  	# Selecting annotation only for the DE genes
	anSig_group_phenotype <- as.data.frame(anno_group_phenotype[anno_group_phenotype[,analysis_level] %in% row.names(resMFgroup_phenotype_sig),])

		

	# Setting the analysis_level
	if ( analysis_level_name=="gene") 
	{
	
		# Take the first entry for each gene
		anno_group_phenotype2<-anno_group_phenotype2[!duplicated(anno_group_phenotype2$ensembl_gene_id),]
	

		# Table of missing information
		resMFgroup_phenotype_sig$ensembl_gene_id<-rownames(resMFgroup_phenotype_sig)						

	}else

	{

	
		# Table of missing information
		resMFgroup_phenotype_sig$ensembl_transcript_id<-rownames(resMFgroup_phenotype_sig)



	}

	

	# Selecting annotation only for the DE genes
	anSig_anno_group_phenotype2 <- as.data.frame(anno_group_phenotype2[anno_group_phenotype2[,paste("ensembl",analysis_level_name,"id",sep="_")] %in% row.names(resMFgroup_phenotype_sig),])

	

	# Exporting results - Sample_Group
	resMFgroup_phenotypeDF <- merge(data.frame(resMFgroup_phenotype_sig), anSig_anno_group_phenotype2,by=paste("ensembl",analysis_level_name,"id",sep="_"), all.x=TRUE, all.y=TRUE)

	

	# Write to file
	write.xlsx(resMFgroup_phenotypeDF, file=paste(outputfolder,"/DiffGenes.xlsx",sep="/"), sheetName=paste(i,ref_group_phenotype,sep="_"), append=TRUE)


	############################################################################################################################################
	# Initialize list of differentially expressed genes
	list_de_genes=list()



	# Names
	names(list_de_genes)<-c()


	# Add genes to the list
	de_genes <-topgenes

	

	# If the analysis is at transcript level

	if ( analysis_level_name=="transcript") 

	{

		de_genes_c <- convertIDs(de_genes, "ensembl_transcript_id", "ensembl_gene_id", mart)	


		# Append to list	
		list_de_genes[[paste(i,ref_group_phenotype,sep="_")]] <- de_genes_c
	}else
	{
		# Append to list	
		list_de_genes[[paste(i,ref_group_phenotype,sep="_")]] <- de_genes
	}


	# Obtain GO terms
	go <- getBM(attributes=c("go_id", "ensembl_gene_id","namespace_1003"), mart=mart)



	# Fix table
	go <- go[go[,3]!="",] 
	go[,3] <- as.character(go[,3])



	# Write tmp table
	write.table(go, paste(resoutputfolder,"/GOannotationsBiomart_mod.txt",sep="/"), quote=FALSE, row.names=FALSE, col.names=FALSE, sep="\t")



	## Create catDB instance (takes a while but needs to be done only once)
	catdb <- makeCATdb(myfile=paste(resoutputfolder,"/GOannotationsBiomart_mod.txt",sep="/"), lib=NULL, org="", colno=c(1,2,3), idconv=NULL)


	# GO analysis on list of DE genes
	GOBatchResult <- GOCluster_Report(catdb=catdb, setlist=list_de_genes, method="all", id_type="gene", CLSZ=10, cutoff=0.001, gocats=c("MF", "BP", "CC"))



	# GO
	png(paste(resoutputfolder,"DiffGenesGO_BP.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="BP")

	dev.off()



	# GO
	png(paste(resoutputfolder,"DiffGenesGO_MF.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="MF")

	dev.off()



	# GO
	png(paste(resoutputfolder,"DiffGenesGO_CC.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="CC")

	dev.off()
}



############################################################################################################################################
# Compare DE genes for subgroup_phenotype Remove these genes and plot PCA.
# For all levels against reference level on the subgroup_phenotype
comb<-t(combn(c(levels(dataInfo[,subgroup_phenotype ])), 2)) 

for (i in 1:dim(comb)[1])
{

	# Set the comparisson
	ref_subgroup_phenotype=comb[i,1]
	i=comb[i,2]

	# Create output
	dir.create(file.path(outputfolder, paste(i,ref_subgroup_phenotype,sep="_")))

	# Output results folder
	resoutputfolder<-paste(outputfolder,paste(i,ref_subgroup_phenotype,sep="_"),sep="/")

		
	# Differential expression analysis for subgroup_phenotype
	resMFsubgroup_phenotype <- DESeq2::results(DESeqData_subgroup_phenotype,contrast=c(subgroup_phenotype, i, ref_subgroup_phenotype), independentFiltering=FALSE)  

	
	# MA plots - subgroup_phenotype
	png(paste(resoutputfolder,"MAplots.png",sep="/"), width = 8, height = 8, units = 'in', res = 600)
		plotMA(resMFsubgroup_phenotype, main=paste(i,ref_subgroup_phenotype,sep=" vs. "), alpha=0.1, ylim=c(-4,4))
	dev.off()	

	

	# Replace NA with 1
	resMFsubgroup_phenotype$padj<-replace(resMFsubgroup_phenotype$padj,which(is.na(resMFsubgroup_phenotype$padj)),1)



	# Take the top most up and down regulated - subgroup_phenotype 
	resMFsubgroup_phenotype_sig = resMFsubgroup_phenotype[ resMFsubgroup_phenotype$padj < 0.1, ]



	# Only logFoldchange greater than zero
	resMFsubgroup_phenotype_up<-resMFsubgroup_phenotype_sig[resMFsubgroup_phenotype_sig$log2FoldChange > 0,]



	# Only logFoldchange smaller than zero
	resMFsubgroup_phenotype_down<-resMFsubgroup_phenotype_sig[resMFsubgroup_phenotype_sig$log2FoldChange < 0,]



	# Order most upregulared
	resMFsubgroup_phenotype_up<-resMFsubgroup_phenotype_up[ order( resMFsubgroup_phenotype_up$padj ), ]



	# Order most downregulated
	resMFsubgroup_phenotype_down<-resMFsubgroup_phenotype_down[ order( resMFsubgroup_phenotype_down$padj ), ]



	# Take the top genes
	topgenes <- c(rownames(resMFsubgroup_phenotype_up),rownames(resMFsubgroup_phenotype_down))



	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	

		mat <- assay(vsd_subgroup_phenotype)[topgenes,]
		mat <- mat - rowMeans(mat)
		# Create data frame with data - subgroup_phenotype
		df_subgroup_phenotype <- as.data.frame(colData(DESeqData_subgroup_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_subgroup_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)

	dev.off()


	# Plot heatmap of most diferentially expressed -only compared sampples
	png(paste(resoutputfolder,"Heatmap_DE_onlyComparisson.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	

		mat <- assay(vsd_group_phenotype)[topgenes,rownames(dataInfo[c(which(dataInfo[,subgroup_phenotype ]==i),which(dataInfo[,subgroup_phenotype ]==ref_subgroup_phenotype)),])]
		mat <- mat - rowMeans(mat)

		# Create data frame with data - group_phenotype
		df_subgroup_phenotype <- as.data.frame(colData(DESeqData_subgroup_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		df_subgroup_phenotype <- df_subgroup_phenotype[which(rownames(df_subgroup_phenotype) %in% rownames(dataInfo[c(which(dataInfo[,subgroup_phenotype ]==i),which(dataInfo[,subgroup_phenotype ]==ref_subgroup_phenotype)),])),]
		pheatmap(mat, annotation_col=df_subgroup_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)

	dev.off()


	

	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE_UP.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)	
		mat <- assay(vsd_subgroup_phenotype)[rownames(resMFsubgroup_phenotype_up),]				
		mat <- mat - rowMeans(mat)
		# Create data frame with data - subgroup_phenotype
		df_subgroup_phenotype <- as.data.frame(colData(DESeqData_subgroup_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_subgroup_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)
	dev.off()	

	

	# Plot heatmap of most diferentially expressed
	png(paste(resoutputfolder,"Heatmap_DE_DOWN.png",sep="/"), width = 8, height = 11, units = 'in', res = 600)
		mat <- assay(vsd_subgroup_phenotype)[rownames(resMFsubgroup_phenotype_down),]				
		mat <- mat - rowMeans(mat)
		# Create data frame with data - subgroup_phenotype
		df_subgroup_phenotype <- as.data.frame(colData(DESeqData_subgroup_phenotype)[,c(group_phenotype,subgroup_phenotype,covariate1,covariate2)])
		pheatmap(mat, annotation_col=df_subgroup_phenotype, fontsize_row=5, fontsize_col=5, show_rownames=FALSE)
	dev.off()		



	# Create plots
	p1<-plotPCA(vsd_subgroup_phenotype[topgenes, ], intgroup=c(group_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p2<-plotPCA(vsd_subgroup_phenotype[topgenes, ], intgroup=c(subgroup_phenotype), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p3<-plotPCA(vsd_subgroup_phenotype[topgenes, ], intgroup=c(covariate1), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 
	p4<-plotPCA(vsd_subgroup_phenotype[topgenes, ], intgroup=c(covariate2), ntop = nrow(assay(vsd_covariate2)))+ labs(color = "") 


	# Save plot
	g <- arrangeGrob(p1,p2,p3,p4,nrow = 2, padding = unit(0.0, "line")) #generates g
	ggsave(file=paste(resoutputfolder,"/pca_DE.png",sep=""), g, units = 'in', dpi = 600,width = 11, height = 11) #saves g


	

	# Plot counts of N differentially expressed genes
	# Number of differentially exptressed genes

	N=25



	# Number of panels
	R=5



	## Sample_group
	# Create an empy list
	l_UP<-list()

	# Create an empy list
	l_DOWN<-list()

	# For the N most differentially expressed genes
	for (j in 1:N) 
	{

		# Initialize plots
		p_UP<-ggplot()	
		

		# Initialize plots
		p_DOWN<-ggplot()	

		if (j<=dim(resMFsubgroup_phenotype_up)[1])

		{



			# Create the counts for the gene
			geneCounts_UP <- plotCounts(DESeqData_subgroup_phenotype[,c(which(dataInfo[,subgroup_phenotype ]==i),which(dataInfo[,subgroup_phenotype ]==ref_subgroup_phenotype))], gene=row.names(resMFsubgroup_phenotype_up[j,]), intgroup=c(subgroup_phenotype),returnData=TRUE, normalized = TRUE)

			
			# Plot the data
			p_UP<-ggplot(geneCounts_UP, aes_string(x=subgroup_phenotype, y="count",group=1)) + scale_y_log10() + geom_point(size=2) + stat_summary(fun.y=mean, geom="line") + theme(legend.position="none")+ ggtitle(row.names(resMFsubgroup_phenotype_up[j,])) + xlab("")+ ylab("")  +  theme(plot.title = element_text(size = 8), text = element_text(size=6))			

		}

		

		if (j<=dim(resMFsubgroup_phenotype_down)[1])

		{

			# Create the counts for the gene
			geneCounts_DOWN <- plotCounts(DESeqData_subgroup_phenotype[,c(which(dataInfo[,subgroup_phenotype ]==i),which(dataInfo[,subgroup_phenotype ]==ref_subgroup_phenotype))], gene=row.names(resMFsubgroup_phenotype_down[j,]), intgroup=c(subgroup_phenotype),returnData=TRUE, normalized = TRUE)

			

			# Plot the data
			p_DOWN<-ggplot(geneCounts_DOWN, aes_string(x=subgroup_phenotype, y="count", group=1)) + scale_y_log10() + geom_point(size=2) +  stat_summary( fun.y=mean, geom="line") + theme(legend.position="none")+ ggtitle(row.names(resMFsubgroup_phenotype_down[j,])) + xlab("")+ ylab("")   +  theme(plot.title = element_text(size = 8), text = element_text(size=6))	

		}

		

		

		# Add plot to the list

		l_UP[[j]]<-p_UP



		# Add plot to the list

		l_DOWN[[j]]<-p_DOWN

		

		

	}

	# Diff genes - subgroup_phenotype
	png(paste(resoutputfolder,"DiffGenesUP.png",sep="/"), width = 11, height = 11, units = 'in', res = 600)

		do.call("grid.arrange", c(l_UP, ncol=R))

	dev.off()



	# Diff genes - subgroup_phenotype
	png(paste(resoutputfolder,"DiffGenesDOWN.png",sep="/"), width = 11, height = 11, units = 'in', res = 600)

		do.call("grid.arrange", c(l_DOWN, ncol=R))

	dev.off()

					 

	# Take annotation of all genes
	anno_subgroup_phenotype <- AnnotationDbi::select(anno, 

				   keys=rownames(resMFsubgroup_phenotype), 

				  columns=c("SYMBOL","SYMBOL", "GENENAME"),

				  keytype=analysis_level)

				  

	# Take annotation of all genes
	anno_group_phenotype2 <- getBM(attributes=c("chromosome_name","ensembl_gene_id","entrezgene", "ensembl_transcript_id","external_gene_name","description"), mart=mart)					 				  
		
				  

  	# Selecting annotation only for the DE genes
	anSig_subgroup_phenotype <- as.data.frame(anno_subgroup_phenotype[anno_subgroup_phenotype[,analysis_level] %in% row.names(resMFsubgroup_phenotype_sig),])

		

	# Setting the analysis_level
	if ( analysis_level_name=="gene") 
	{
	
		# Take the first entry for each gene
		anno_group_phenotype2<-anno_group_phenotype2[!duplicated(anno_group_phenotype2$ensembl_gene_id),]
	

		# Table of missing information
		resMFsubgroup_phenotype_sig$ensembl_gene_id<-rownames(resMFsubgroup_phenotype_sig)						

	}else

	{

	
		# Table of missing information
		resMFsubgroup_phenotype_sig$ensembl_transcript_id<-rownames(resMFsubgroup_phenotype_sig)



	}

	

	# Selecting annotation only for the DE genes
	anSig_anno_group_phenotype2 <- as.data.frame(anno_group_phenotype2[anno_group_phenotype2[,paste("ensembl",analysis_level_name,"id",sep="_")] %in% row.names(resMFsubgroup_phenotype_sig),])

	

	# Exporting results - Sample_Group
	resMFsubgroup_phenotypeDF <- merge(data.frame(resMFsubgroup_phenotype_sig), anSig_anno_group_phenotype2,by=paste("ensembl",analysis_level_name,"id",sep="_"), all.x=TRUE, all.y=TRUE)

	

	# Write to file
	write.xlsx(resMFsubgroup_phenotypeDF, file=paste(outputfolder,"/DiffGenes.xlsx",sep="/"), sheetName=paste(i,ref_subgroup_phenotype,sep="_"), append=TRUE)


	############################################################################################################################################
	# Initialize list of differentially expressed genes
	list_de_genes=list()



	# Names
	names(list_de_genes)<-c()


	# Add genes to the list
	de_genes <-topgenes

	

	# If the analysis is at transcript level

	if ( analysis_level_name=="transcript") 

	{

		de_genes_c <- convertIDs(de_genes, "ensembl_transcript_id", "ensembl_gene_id", mart)	


		# Append to list	
		list_de_genes[[paste(i,ref_subgroup_phenotype,sep="_")]] <- de_genes_c
	}else
	{
		# Append to list	
		list_de_genes[[paste(i,ref_subgroup_phenotype,sep="_")]] <- de_genes
	}


	# Obtain GO terms
	go <- getBM(attributes=c("go_id", "ensembl_gene_id","namespace_1003"), mart=mart)



	# Fix table
	go <- go[go[,3]!="",] 
	go[,3] <- as.character(go[,3])



	# Write tmp table
	write.table(go, paste(resoutputfolder,"/GOannotationsBiomart_mod.txt",sep="/"), quote=FALSE, row.names=FALSE, col.names=FALSE, sep="\t")



	## Create catDB instance (takes a while but needs to be done only once)
	catdb <- makeCATdb(myfile=paste(resoutputfolder,"/GOannotationsBiomart_mod.txt",sep="/"), lib=NULL, org="", colno=c(1,2,3), idconv=NULL)


	# GO analysis on list of DE genes
	GOBatchResult <- GOCluster_Report(catdb=catdb, setlist=list_de_genes, method="all", id_type="gene", CLSZ=10, cutoff=0.001, gocats=c("MF", "BP", "CC"))



	# GO
	png(paste(resoutputfolder,"DiffGenesGO_BP.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="BP")

	dev.off()



	# GO
	png(paste(resoutputfolder,"DiffGenesGO_MF.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="MF")

	dev.off()

	# GO
	png(paste(resoutputfolder,"DiffGenesGO_CC.png",sep="/"), width = 11, height = 16, units = 'in', res = 600)

		goBarplot(GOBatchResult, gocat="CC")

	dev.off()
}
